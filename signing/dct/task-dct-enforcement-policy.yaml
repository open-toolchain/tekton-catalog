---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: signing-dct-enforcement-policy
spec:
  params:
    - name: shuttle-properties-file
      description: properties file in the workspace that contains DCT initialization information
    - name: region
      description: target region
    - name: resource-group
      description: the resource group
    - name: cluster-name
      description: the name of the targeted cluster
    - name: cluster-namespace
      description: The cluster namespace to deploy rules
    - name: helm-version
      description: specific helm version
      default: 2.16.1
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: continuous-delivery-context-secret
      description: name of the secret containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud service
      default: apikey
    - name: pipeline-debug
      description: Pipeline debug mode
      default: "0"
  steps:
    - name: apply-image-enforcement-policy
      image: ibmcom/pipeline-base-image:2.6
      env:
        - name: IBM_CLOUD_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.apikey-secret-key)
        - name: IBMCLOUD_TARGET_RESOURCE_GROUP
          value: $(params.resource-group)
        - name: IBMCLOUD_TARGET_REGION
          value: $(params.region)
        - name: TARGET_CLUSTER
          value: $(params.cluster-name)
        - name: CLUSTER_NAMESPACE
          value: $(params.cluster-namespace)
        - name: DEFAULT_HELM_VERSION
          value: $(params.helm-version)
        - name: SHUTTLE_PROPERTIES_FILE
          value: $(params.shuttle-properties-file)
        - name: PIPELINE_DEBUG
          value: $(params.pipeline-debug)
        - name: HOME
          value: /root
      command: ["/bin/bash", "-c"]
      workingDir: /artifacts
      # yamllint disable rule:line-length
      args:
        - |
          set -e -o pipefail

          if [[ $PIPELINE_DEBUG == 1 ]]; then
            pwd
            env
            trap env EXIT
            set -x
          fi

          ibmcloud config --check-version false
          ibmcloud login --apikey "$IBM_CLOUD_API_KEY" -r "$IBMCLOUD_TARGET_REGION"
          ibmcloud target -g "$IBMCLOUD_TARGET_RESOURCE_GROUP"

          eval $(ibmcloud ks cluster config --cluster "${TARGET_CLUSTER}" --export -s)

          if ! kubectl get namespace "$CLUSTER_NAMESPACE"; then
            echo "creating namespace $CLUSTER_NAMESPACE"
            kubectl create namespace "$CLUSTER_NAMESPACE"
          fi

          # Verify helm is up & running
          source <(curl -s -S -L "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_helm_up_and_running.sh")

          # Install CISE
          if helm list cise | grep '^cise'; then
            echo "Container Image Security Enforcement is already installed"
          else
            helm repo add iks-charts https://icr.io/helm/iks-charts
            helm install --name cise iks-charts/ibmcloud-image-enforcement
          fi

          if [ "$SHUTTLE_PROPERTIES_FILE" ]; then
            cat $SHUTTLE_PROPERTIES_FILE
            source $SHUTTLE_PROPERTIES_FILE
            export $(cut -d= -f1 $SHUTTLE_PROPERTIES_FILE)            
          fi

          source <(curl -s -S -L "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/image_signing/create_cise_crd.sh")

          # Define custom user policies
          echo "Create CISE custom policies"
          for signer_and_key in $(cat dct_signers.json | jq -r -c '.[] | {name:.Name, key: .Keys[0].ID}'); do
            DEVOPS_SIGNER=$(echo $signer_and_key | jq -r '.name')
            DEVOPS_SIGNER_PRIVATE_KEY=$(echo $signer_and_key | jq -r '.key')

            echo "CURRENT SIGNER=$DEVOPS_SIGNER"

            createCISE_CRD | tee cise_crd_custom_policy.yaml

            echo " "
            echo "Applying CISE custom policy to $CLUSTER_NAMESPACE"
            kubectl apply -f cise_crd_custom_policy.yaml -n$CLUSTER_NAMESPACE

            echo "Creating Secret $REGISTRY_NAMESPACE.$IMAGE_NAME.$DEVOPS_SIGNER to provide public key"
            # ensure the secret is not already existing
            kubectl delete secret "$REGISTRY_NAMESPACE.$IMAGE_NAME.$DEVOPS_SIGNER" -n$CLUSTER_NAMESPACE \
              --ignore-not-found=true
            kubectl create secret generic "$REGISTRY_NAMESPACE.$IMAGE_NAME.$DEVOPS_SIGNER" -n$CLUSTER_NAMESPACE \
              --from-literal=name=$DEVOPS_SIGNER \
              --from-file=publicKey=$DEVOPS_SIGNER.pub
          done
      # yamllint enable rule:line-length
  workspaces:
    - name: artifacts
      mountPath: /artifacts
