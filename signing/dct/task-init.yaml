---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: signing-dct-init
spec:
  params:
    - name: image-name
      description: The image name that Docker Content Trust will be configured for
    - name: vault-region
      description: the region of the keyprotect instance
      default: ""
    - name: vault-resource-group
      description: the resource group of the keyprotect instance
      default: ""
    - name: vault-name
      description: the key protect instance name
    - name: registry-namespace
      description: The registry namespace
    - name: registry-region
      description: the registry region
    - name: validation-signer
      description: validation signer
    - name: build-signer
      description: build signer
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: continuous-delivery-context-secret
      description: name of the secret containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud service
      default: apikey
    - name: pipeline-debug
      description: Pipeline debug mode
      default: "0"
    - name: commons-hosted-region
      default: "https://raw.githubusercontent.com/open-toolchain/commons/master"
  results:
    - name: shuttle-properties-file
      description: The properties file that will contains Docker Content Trust initialization information
  workspaces:
    - name: artifacts
      mountPath: /artifacts
  steps:
    - name: create-dct-keys
      image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6
      env:
        - name: IBM_CLOUD_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.apikey-secret-key)
        - name: IMAGE_NAME
          value: $(params.image-name)
        - name: VAULT_REGION
          value: $(params.vault-region)
        - name: VAULT_RESOURCE_GROUP
          value: $(params.vault-resource-group)
        - name: VAULT_INSTANCE
          value: $(params.vault-name)
        - name: REGISTRY_NAMESPACE
          value: $(params.registry-namespace)
        - name: REGISTRY_REGION
          value: $(params.registry-region)
        - name: DEVOPS_VALIDATION_SIGNER
          value: $(params.validation-signer)
        - name: DEVOPS_BUILD_SIGNER
          value: $(params.build-signer)
        - name: ARCHIVE_DIR
          value: /artifacts
        - name: HOME
          value: /root
        # Docker client configuration
        # Connect to the sidecar over TCP, with TLS.
        - name: DOCKER_HOST
          value: "tcp://localhost:2376"
        # Verify TLS.
        - name: DOCKER_TLS_VERIFY
          value: "1"
        # Use the certs generated by the sidecar daemon.
        - name: DOCKER_CERT_PATH
          value: /certs/client
        - name: PIPELINE_DEBUG
          value: $(params.pipeline-debug)
      workingDir: /artifacts
      # yamllint disable rule:line-length
      script: |
        #!/bin/bash

        if [[ $PIPELINE_DEBUG == 1 ]]; then
          pwd
          env
          trap env EXIT
          set -x
        fi

        echo "ADD DOCKER"
        source <(curl -sSL "$(params.commons-hosted-region)/scripts/image_signing/add_docker.sh")

        # Get the notary binary
        curl -L https://github.com/theupdateframework/notary/releases/download/v0.6.1/notary-Linux-amd64 -o /usr/local/bin/notary
        # Make it executable
        chmod +x /usr/local/bin/notary

        # if vault region is in the 'ibm:yp:<region>' just keep the region part
        export VAULT_REGION=$(echo "$VAULT_REGION" | awk -F ':' '{print $NF;}')

        ibmcloud config --check-version false
        ibmcloud login -a $(params.ibmcloud-api) --apikey "$IBM_CLOUD_API_KEY" -r "$VAULT_REGION"

        if [ -z "$VAULT_RESOURCE_GROUP" ]; then
          echo "Using default resource group"
        else
          ibmcloud target -g "$VAULT_RESOURCE_GROUP"
        fi

        export DOCKER_CONTENT_TRUST=1

        # configure the container registry
        echo "REGISTRY REGION $REGISTRY_REGION"
        # if registry region is in the 'ibm:yp:<region>' just keep the region part
        export REGISTRY_REGION=$(echo "$REGISTRY_REGION" | awk -F ':' '{print $NF;}')
        ibmcloud cr region-set $REGISTRY_REGION
        echo "REGISTRY REGION $REGISTRY_REGION"

        # login docker to ibm container registry
        ibmcloud cr login

        # check the existence of the container registry namespace
        REGISTRY_URL=$(ibmcloud cr info | grep -m1 -i '^Container Registry' | awk '{print $3;}')

        echo "Check for $REGISTRY_NAMESPACE existence"
        NS=$( ibmcloud cr namespaces | tail --lines=+4 | head --lines=-2 | grep "^$REGISTRY_NAMESPACE" ||: )
        if [ -z "${NS}" ]; then
          echo "Creating REGISTRY_NAMESPACE in $REGISTRY_URL"
          ibmcloud cr namespace-add $REGISTRY_NAMESPACE
        else
          echo "$REGISTRY_NAMESPACE exists in $REGISTRY_URL"
        fi

        export GUN="$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME"
        export COMMONS_HOSTED_REGION=$(params.commons-hosted-region)
        source <(curl -sSL "$(params.commons-hosted-region)/scripts/image_signing/check_signers.sh")
        source <(curl -sSL "$(params.commons-hosted-region)/scripts/image_signing/signing_utils.sh")
        if [ $(findTrustData "$GUN") == "false" ]; then
          echo "NO TRUST DATA FOUND"
          # Initialize the repository for Docker Content Trust
          # Generate passphrase for root and repository keys
          # see https://docs.docker.com/engine/security/trust/trust_key_mng/#choose-a-passphrase
          if [ -z "$DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE" ]; then
            export DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE=$(openssl rand -base64 16)
          fi
          if [ -z "$DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE" ]; then
            export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$(openssl rand -base64 16)
          fi
          echo "Doing Docker Content Trust initialization for GUN $REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME"

          source <(curl -s -S -L "$(params.commons-hosted-region)/scripts/image_signing/notary_init_gun.sh")

          echo "Backing-up keys in $VAULT_INSTANCE"
          # jsonify the Vault access values
          VAULT_DATA=$(buildVaultAccessDetailsJSON "$VAULT_INSTANCE" "${VAULT_REGION:-$IBMCLOUD_TARGET_REGION}" "${VAULT_RESOURCE_GROUP:-$IBMCLOUD_TARGET_RESOURCE_GROUP}")
          JSON_DATA="$(readData "$REGISTRY_NAMESPACE.$IMAGE_NAME.keys" "$VAULT_DATA")"
          #save the root, repo pem key files to the Vault
          JSON_ROOT_DATA=$(addTrustFileToJSON "root" "$JSON_ROOT_DATA" "$DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE")
          JSON_ROOT_DATA=$(addTrustFileToJSON "target" "$JSON_ROOT_DATA" "$DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE")
          deleteSecret "$REGISTRY_NAMESPACE.$IMAGE_NAME.repokeys" "$VAULT_DATA"
          saveData "$REGISTRY_NAMESPACE.$IMAGE_NAME.repokeys" "$VAULT_DATA" "$JSON_ROOT_DATA"
        else
          #
          echo "TRUST DATA ALREADY FOUND FOR $GUN"
        fi

        signerList=("$DEVOPS_BUILD_SIGNER" "$DEVOPS_VALIDATION_SIGNER")
        for i in "${signerList[@]}"; do
          DEVOPS_SIGNER=$i
          # Restore root & repository keys
          echo "Restoring keys from $VAULT_INSTANCE"
          echo "Create signer $DEVOPS_SIGNER for $REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME"
          source <(curl -sSL "$(params.commons-hosted-region)/scripts/image_signing/add_signer.sh")
        done

        # Record task results
        echo -n "dct.properties" > $(results.shuttle-properties-file.path)
    # yamllint enable rule:line-length
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs
  sidecars:
    - image: docker:dind
      name: server
      securityContext:
        privileged: true
      env:
        # Write generated certs to the path shared with the client.
        - name: DOCKER_TLS_CERTDIR
          value: /certs
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs
      # Wait for the dind daemon to generate the certs it will share with the client.
      readinessProbe:
        periodSeconds: 1
        exec:
          command: ["ls", "/certs/client/ca.pem"]
  volumes:
    - name: dind-certs
      emptyDir: {}
