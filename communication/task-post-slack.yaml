apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: task-post-slack
spec:
  inputs:
    params:
      - name: task-pvc
        description: the output pvc
      - name: domain
        description: the Slack domain to send the message to.
        default: ' '
      - name: channel
        description: the Slack channel to send the message to. If not set, the default channel as set in the Slack Webhook URL will be used.
        default: ' '
      - name: messageFormat
        description: the format of the message. text(default) or JSON payload.
        default: text
      - name: messageScript
        description: Shell script that provides messsage content.
        default: ''
      - name: message
        description: the message to send to Slack
        default: 'Tekton Pipeline completed successfully. :heavy_check_mark:\nVisit *<https://api.slack.com/reference/surfaces/formatting|More on Slack message formatting.>*'
      - name: exitOnError
        description: flag (`true` | `false`) to indicate if the task should fail or continue if unable to process the message or post to Slack.
        default: 'false'
  steps:
    - name: post-to-slack
      # tbd: use an image with curl and jq?
      image: ibmcom/pipeline-base-image
      env:
        - name: SLACK_CHANNEL
          value: $(inputs.params.channel)
        # keep slack message injected in an env var to let YAML manage the quote for us
        - name: SLACK_MESSAGE
          value: $(inputs.params.message)
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          # determine if we should fail the task in case of error: default is 'false'
          # TBD Benoit - quel devrait Ãªtre le default?
          exitStatus=0
          if [ $(inputs.params.exitOnError) == 'true' ]; then
            exitStatus=1
          fi
          # ensure domain is set
          SLACK_DOMAIN=$(echo $(inputs.params.domain))
          if [ -z "$SLACK_DOMAIN" ]; then
            echo "No Slack domain passed as parameter. Add domain environment property and value to your Tekton pipeline."
            echo "Exiting...$exitStatus"
            exit $exitStatus
          fi
          # Dynamically set message if messageScript param is set
          printf "#!/bin/sh\n" > /steps/messageScript.sh 
          printf "%s " '$(inputs.params.messageScript)' >> /steps/messageScript.sh
          chmod +x /steps/messageScript.sh
          /steps/messageScript.sh 2 >& 1 > /steps/message.content
          if [ -s /steps/message.content ]; then
            echo "************************************"
            echo "Snippet for dynamic message content:"
            cat /steps/messageScript.sh
            echo ""
            echo "************************************"
          else 
             echo "${SLACK_MESSAGE}" > /steps/message.content
          fi
          #####################################################
          if [[ "$(inputs.params.messageFormat)" != "text" ]]; then
            # message.content is already expected to be a slack json payload
            mv /steps/message.content /steps/payload.json
          fi 
          #####################################################
          echo "Retrieving Slack webhook(s) for $SLACK_DOMAIN domain."
          msgSent=0
          for SLACK_INTEGRATION in $(cat /cd-config/toolchain.json | jq -c -r '.services[] | select (.service_id=="slack") | select (.parameters.team_url=="'"${SLACK_DOMAIN}"'") | (.parameters) | ({"webhook":.api_token, "channel":.channel_name})')
            do
              WEBHOOK=$(echo ${SLACK_INTEGRATION} | jq -r ' .webhook')
              if [[ "$(inputs.params.messageFormat)" == "text" ]]; then
                if [ "$SLACK_CHANNEL" ]; then
                  CHANNEL=$SLACK_CHANNEL
                  echo "Using channel $CHANNEL as passed as parameter."
                else
                  CHANNEL=$(echo ${SLACK_INTEGRATION} | jq -r ' .channel')
                  echo "Using channel $CHANNEL as defined in Slack integration."
                fi
                # format message to a Slack JSON payload
                # echo "Formatting text message to JSON."
                echo '{"channel": "'"${CHANNEL}"'", "type": "text"}' | jq --rawfile text /steps/message.content '.text=$text' > /steps/payload.json
              fi
              echo "Slack Message payload:"
              cat /steps/payload.json
              echo "Posting Slack Message using Webhook $WEBHOOK."
              if [ $(curl -X POST -H 'Content-type: application/json' -d @/steps/payload.json -o /dev/null -w "%{http_code}" "$WEBHOOK") = 200 ]; then
                msgSent=$((msgSent+1))
              else
                echo "Failed to post the message to Slack. Exiting...." 
                exit $exitStatus          
             fi
          done
          echo "Done: ${msgSent} message(s) posted to Slack."
      volumeMounts:
        - mountPath: /steps
          name: steps-volume
        - mountPath: /cd-config
          name: cd-config-volume
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
