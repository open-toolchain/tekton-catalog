---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: iks-deploy-to-kubernetes
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: continuous-delivery-context-secret
      description: name of the configmap containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: kubernetes-service-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud kubernetes service
      default: apikey
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: ""
    - name: cluster-region
      description: |
        (optional) the ibmcloud region hosting the cluster (if none is found it will default to the toolchain region)
      default: ""
    - name: cluster-name
      description: name of the cluster - required if no cluster pipeline resource provided to this task
      default: ""
    - name: image-url
      default: ""
    - name: shuttle-properties-file
      default: ""
    - name: setup-script
      default: ""
    - name: script
      default: ""
    - name: post-execution-script
      default: ""
    - name: pipeline-debug
      default: "0"
  results:
    - name: app-url
      description: The running application's URL (obtained from APP_URL variable set by the executed script)
    - name: cluster-name
      description: The cluster name
    - name: cluster-id
      description: The cluster identifier
    - name: resource-group-name
      description: The resource-group name that this cluster is part of
    - name: resource-group-id
      description: The resource-group identifier that this cluster is part of
    - name: region
      description: The region (ie us-south) where the cluster is located
  workspaces:
    - name: artifacts
      description: A workspace
      mountPath: /artifacts
  steps:
    - name: execute
      image: ibmcom/pipeline-base-image:2.6
      workingDir: /artifacts
      env:
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: PIPELINE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
        - name: PIPELINE_STAGE_EXECUTION_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
        - name: PIPELINE_TRIGGERING_USER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/triggered-by']
        - name: PIPELINE_BLUEMIX_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.kubernetes-service-apikey-secret-key)
        - name: PIPELINE_BLUEMIX_RESOURCE_GROUP
          value: $(params.resource-group)
        - name: PIPELINE_KUBERNETES_CLUSTER_NAME
          value: $(params.cluster-name)
        - name: PIPELINE_IMAGE_URL
          value: $(params.image-url)
        - name: SHUTTLE_PROPERTIES_FILE
          value: $(params.shuttle-properties-file)
        - name: PIPELINE_DEBUG
          value: $(params.pipeline-debug)
      script: |
        #!/bin/bash
        set -e -o pipefail

        if [ $PIPELINE_DEBUG == 1 ]; then
            env
            pwd
            ls -l
            echo "=== cat /artifacts/_toolchain.json ==="
            cat /artifacts/_toolchain.json
            echo ""
            echo "======================================"
            trap env EXIT
            set -x
        fi

        # SETUP BEGIN
        ibmcloud config --check-version false
        if [ "$(params.cluster-region)" ]; then
          # if cluster region is in the 'ibm:yp:<region>' just keep the region part
          export IBM_CLOUD_REGION=$(echo "$(params.cluster-region)" | awk -F ':' '{print $NF;}')
        else
          export IBM_CLOUD_REGION=$(jq -r '.region_id' /artifacts/_toolchain.json | awk -F: '{print $3}')
        fi
        ibmcloud login -a $(params.ibmcloud-api) -r $IBM_CLOUD_REGION --apikey $PIPELINE_BLUEMIX_API_KEY

        if [ "$PIPELINE_BLUEMIX_RESOURCE_GROUP" ]; then
          ibmcloud target -g "$PIPELINE_BLUEMIX_RESOURCE_GROUP"
        fi

        if ibmcloud ks cluster get --cluster $PIPELINE_KUBERNETES_CLUSTER_NAME; then
          eval $(ibmcloud ks cluster config --cluster $PIPELINE_KUBERNETES_CLUSTER_NAME --export -s)
        else
          echo "Cluster $PIPELINE_KUBERNETES_CLUSTER_NAME not found. Accessible clusters are:"
          ibmcloud ks clusters
          exit 1
        fi

        ibmcloud ks cluster get --cluster $PIPELINE_KUBERNETES_CLUSTER_NAME --json > /steps/$PIPELINE_KUBERNETES_CLUSTER_NAME.json
        # If the target cluster is openshift then make the appropriate additional login with oc tool
        if which oc > /dev/null && jq -e '.type=="openshift"' /steps/$PIPELINE_KUBERNETES_CLUSTER_NAME.json > /dev/null; then
          echo "$PIPELINE_KUBERNETES_CLUSTER_NAME is an openshift cluster. Doing the appropriate oc login to target it"
          oc login -u apikey -p "${PIPELINE_BLUEMIX_API_KEY}"
        fi

        export PIPELINE_TOOLCHAIN_ID=$(jq -r '.toolchain_guid' /artifacts/_toolchain.json)

        if [ "$SHUTTLE_PROPERTIES_FILE" ]; then
          source $SHUTTLE_PROPERTIES_FILE
          export $(cut -d= -f1 $SHUTTLE_PROPERTIES_FILE)
        fi

        $(params.setup-script)

        # DO THE WORK
        $(params.script)

        $(params.post-execution-script)

        # Record task results
        echo -n "$APP_URL" > $(results.app-url.path)
        echo -n "$(cat /steps/$PIPELINE_KUBERNETES_CLUSTER_NAME.json | jq -r '.name')" > $(results.cluster-name.path)
        echo -n "$(cat /steps/$PIPELINE_KUBERNETES_CLUSTER_NAME.json | jq -r '.id')" > $(results.cluster-id.path)
        echo -n "$(cat /steps/$PIPELINE_KUBERNETES_CLUSTER_NAME.json | jq -r '.resourceGroupName')" > $(results.resource-group-name.path)
        echo -n "$(cat /steps/$PIPELINE_KUBERNETES_CLUSTER_NAME.json | jq -r '.resourceGroup')" > $(results.resource-group-id.path)
        echo -n "$(cat /steps/$PIPELINE_KUBERNETES_CLUSTER_NAME.json | jq -r '.region')" > $(results.region.path)
      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /steps
          name: steps-volume
        - mountPath: /artifacts/_toolchain.json
          subPath: toolchain.json
          name: cd-config-volume
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
