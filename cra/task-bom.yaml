---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cra-bom
spec:
  params:
    - name: repository
      description: the git repo
    - name: revision
      description: the revision
      default: master
    - name: commit-id
      description: git commit id
    - name: pr-url
      description: pull request html url
    - name: continuous-delivery-context-secret
      description: Reference name for the secret resource
      default: "secure-properties"
    - name: target-branch
      description: target branch
    - name: target-commit-id
      description: target branch commit id 
    - name: ibmcloud-api-key
      description: the IBM Cloud API key
      default: ""
    - name: project-id
      description: for gitlab repository, specify project-id
      default: ""
    - name: git-api-token-key
      description: The name of the secret in the workspace
      default: "git-token"
    - name: scm-type
      description: source code type used (github, github-ent, gitlab)
      default: "github-ent" 
    - name: pipeline-debug
      description: toggles debug mode for the pipeline
      default: "0"
      
  results:
    - name: status
      description: status of bom task, possible value are-success|failure
    - name: evidence-store
      description: filepath to store bom task evidence
   
  stepTemplate:
    env:
      - name: PIPELINE_RUN_ID
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)
      
  steps:
    - name: bom
      image: icr.io/continuous-delivery/cra-bom:main.1001
      imagePullPolicy: Always
      workingDir: "/artifacts"
      command: ["/bin/sh", "-c"]
      args:
        - |
          #!/bin/sh         

          if [ "$PIPELINE_DEBUG" == "1" ]; then
            pwd
            env
            trap env EXIT
            set -x +e
          fi

          API_KEY=$(params.ibmcloud-api-key)

          TOOLCHAIN_CONFIG=$(cat /config/toolchain.json)
          TOOLCHAIN_REGION=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.region_id' | awk -F: '{print $3}')
          TOOLCHAIN_ID=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.toolchain_guid')
          REGION_ID=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.region_id')

          API_ENDPOINT="https://cloud.ibm.com"
          OTC_BROKER_BASE_URL="https://otcbroker.devopsinsights.cloud.ibm.com"
          if echo "${REGION_ID}" | grep -q "ys1"; then
            OTC_BROKER_BASE_URL="https://otcbroker.devopsinsights.dev.cloud.ibm.com"
            API_ENDPOINT="https://test.cloud.ibm.com"
            echo "targeting otc broker @ ${OTC_BROKER_BASE_URL}"
            echo "targeting ibm cloud @ ${API_ENDPOINT}"
          fi

          echo "Fetching users's token"
          ibmcloud config --check-version false
          ibmcloud login -a $API_ENDPOINT -r $TOOLCHAIN_REGION --apikey $API_KEY
          export IBM_CLOUD_BEARER=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token' | awk '{ print $2 }')

          echo "Fetching service urls for user's data"
          HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
            -X GET "${OTC_BROKER_BASE_URL}/globalauth/toolchainids/${TOOLCHAIN_ID}" \
            --header "Authorization: Bearer ${IBM_CLOUD_BEARER}")
          HTTP_STATUS=$(echo $HTTP_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          if [ "$HTTP_STATUS" -eq 401 -o "$HTTP_STATUS" -eq 403 ]; then
            echo ""
            echo "Error authenticating user for toolchain_id: ${TOOLCHAIN_ID}"
            echo "Please verify the Devops Insights card has been added to your toolchain and the api-key has access."
            exit 1
          fi
          
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo ""
            echo "Error! Please try again."
            exit 1
          fi

          HTTP_BODY=$(echo $HTTP_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')
          gitsecureUrl=$(echo ${HTTP_BODY} | jq -r '.service_urls.gitsecure')

          if [ -z "$gitsecureUrl" -o "$gitsecureUrl" = "null" ]; then
            echo ""
            echo "Error IBM Code Risk Analyzer is not supported in ${REGION_ID}"
            exit 1
          fi

          uiUrl=$(echo ${HTTP_BODY} | jq -r '.service_urls.controlcenter')

          if [ -z "$uiUrl" -o "$uiUrl" = "null" ]; then
            echo "Error fetching the ui url."
            exit 1
          fi

          sudo --preserve-env /gitsecure/bom-task \
            -giturl "$(params.repository)" \
            -gitbranch "$(params.revision)" \
            -rigserviceapi ${gitsecureUrl} \
            -ui_url ${uiUrl} \
            -pr "$(params.pr-url)" \
            -runid "$PIPELINE_RUN_ID" \
            -commitid "$(params.commit-id)" \
            -target_commitid "$(params.target-commit-id)" \
            -target_branch "$(params.target-branch)" \
            -results_status "$(results.status.path)" \
            -results_evidence "./gitsecure-cis-results.json" \
            -toolchainid "${TOOLCHAIN_ID}" \
            -comment_md "./gitsecure-bom-comment.md"

          echo -n "gitsecure-bom-results.json" > $(results.evidence-store.path)
          echo "COMMENT_FP=./gitsecure-bom-comment.md" >> /steps/next-step-env.properties

      volumeMounts:
        - mountPath: /config
          name: config-volume
        - mountPath: /steps
          name: steps-volume

    - name: comment-editor
      image: icr.io/continuous-delivery/cra-comm-editor:main.995
      imagePullPolicy: Always
      workingDir: "/artifacts"
      command: ["/bin/sh", "-c"]
      args:
        - |
          #!/bin/sh
          source /steps/next-step-env.properties

          GIT_TOKEN=$(cat "/secrets/$(params.git-api-token-key)")

          /usr/local/bin/comm-editor \
            -repo-url "$(params.repository)" \
            -pr-url "$(params.pr-url)" \
            -token "$GIT_TOKEN" \
            -comment-fp "$COMMENT_FP" \
            -project-id "$(params.project-id)" \
            -scm-type "$(params.scm-type)" 

      volumeMounts:
        - mountPath: /steps
          name: steps-volume
          
  workspaces:
    - name: artifacts
      mountPath: /artifacts
    - name: secrets
      mountPath: /secrets

  volumes:
    - name: config-volume
      configMap:
        name: toolchain
    - name: steps-volume
      emptyDir: {}
    - name: secrets
      secret:
        secretName: $(params.continuous-delivery-context-secret)    
