---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cra-discovery
spec:
  params:
    - name: repository
      description: the git repo
    - name: revision
      description: the revision
      default: master
    - name: commit-id
      description: git commit id
    - name: commit-timestamp
      description: git commit timestamp
    - name: directory-name
      description: directory name where the repository is cloned
    - name: pipeline-debug
      description: Pipeline debug mode. Value can be 0 or 1. Default to 0
      default: "0"
    - name: continuous-delivery-context-secret
      description: Reference name for the secret resource
      default: "secure-properties"
    - name: ibmcloud-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: continuous-delivery-context-environment
      description: Name of the configmap containing the continuous delivery pipeline context environment properties
      default: environment-properties
    - name: maven-exclude-scopes
      description: Tag dependencies in scope as dev for the vulnerability scan
      default: ""
    - name: gradle-exclude-configs
      description: Tag dependencies in gradle configurations as dev for the vulnerability scan
      default: ""
    - name: nodejs-create-package-lock
      description: Enable CRA discovery to build the package-lock.json file for node.js repos
      default: "false"
    - name: python-create-requirements-txt
      description: Enable CRA discovery to build the requirements.txt file for python repos
      default: "false"

  results:
    - name: status
      description: status of discovery task, possible value are-success|failure

  stepTemplate:
    env:
      - name: PIPELINE_ID
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
      - name: PIPELINE_RUN_ID
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)

  steps:
    - name: discovery
      image: icr.io/continuous-delivery/cra-discovery:release.2303
      env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.ibmcloud-apikey-secret-key)
              optional: true
        # The location of the client configuration files.
        - name: DOCKER_CONFIG
          value: /artifacts

      imagePullPolicy: Always
      workingDir: "/artifacts"
      command: ["/bin/sh", "-c"]
      args:
        - |
          #!/bin/sh
          if [ "$PIPELINE_DEBUG" = "1" ]; then
            pwd
            env
            trap env EXIT
            set -x +e
          fi

          REPO_DIR_PATH="/artifacts/$(params.directory-name)"

          TOOLCHAIN_REGION=$(cat /config/toolchain.json | jq -r '.region_id' | awk -F: '{print $3}')
          TOOLCHAIN_ID=$(cat /config/toolchain.json | jq -r '.toolchain_guid')
          REGION_ID=$(cat /config/toolchain.json | jq -r '.region_id')

          API_ENDPOINT="https://cloud.ibm.com"
          OTC_BROKER_BASE_URL="https://otcbroker.devopsinsights.cloud.ibm.com"
          PIPELINE_URL="https://cloud.ibm.com"
          IAM_URL="https://iam.cloud.ibm.com"
          if echo "${REGION_ID}" | grep -q "ys1"; then
            OTC_BROKER_BASE_URL="https://otcbroker.devopsinsights.dev.cloud.ibm.com"
            API_ENDPOINT="https://test.cloud.ibm.com"
            PIPELINE_URL="https://dev.console.test.cloud.ibm.com"
            IAM_URL="https://iam.test.cloud.ibm.com"
            echo "targeting otc broker @ ${OTC_BROKER_BASE_URL}"
            echo "targeting ibm cloud @ ${API_ENDPOINT}"
          fi

          PIPELINE_URL="${PIPELINE_URL}/devops/pipelines/tekton/${PIPELINE_ID}/runs/${PIPELINE_RUN_ID}?env_id=${REGION_ID}"

          echo "Fetching users's token"
          ibmcloud config --check-version false
          sh /scripts/retry.sh ibmcloud login -a $API_ENDPOINT --no-region --apikey $API_KEY
          export IBM_CLOUD_BEARER=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token' | awk '{ print $2 }')

          echo "Fetching service urls for user's data"
          HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
            -X GET "${OTC_BROKER_BASE_URL}/globalauth/toolchainids/${TOOLCHAIN_ID}" \
            --header "Authorization: Bearer ${IBM_CLOUD_BEARER}")
          HTTP_STATUS=$(echo $HTTP_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          if [ "$HTTP_STATUS" -eq 401 -o "$HTTP_STATUS" -eq 403 ]; then
            echo ""
            echo "Error authenticating user for toolchain_id: ${TOOLCHAIN_ID}"
            echo "Please verify the Devops Insights card has been added to your toolchain and the api-key has access."
            exit 1
          fi

          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo ""
            echo "Error! Please try again."
            exit 1
          fi

          HTTP_BODY=$(echo $HTTP_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')
          gitsecureUrl=$(echo ${HTTP_BODY} | jq -r '.service_urls.gitsecure')

          if [ -z "$gitsecureUrl" -o "$gitsecureUrl" = "null" ]; then
            echo ""
            echo "Error IBM Code Risk Analyzer is not supported in ${REGION_ID}"
            exit 1
          fi

          # create a dry-run k8s secret of type docker-registry to obtain
          # the pull secrets for the base image used in the dockerfile
          # this is optional, but sometimes useful, for example when using
          # UBI images from RedHat

          if [ -f "/properties/build-baseimage-auth-user" ] \
            && [ -f "/secrets/build-baseimage-auth-password" ] \
            && [ -f "/properties/build-baseimage-auth-host" ]; then
            echo "Adding pull secrets to access base image registry $(cat /properties/build-baseimage-auth-host)"
            kubectl create secret --dry-run=client --output=json \
              docker-registry registry-dockerconfig-secret \
              --docker-username="$(cat /properties/build-baseimage-auth-user)" \
              --docker-password="$(cat /secrets/build-baseimage-auth-password)" \
              --docker-server="$(cat /properties/build-baseimage-auth-host)" \
              --docker-email="$(cat /properties/build-baseimage-auth-email)" | \
              jq -r '.data[".dockerconfigjson"]' | base64 -d > config.json
          fi

          /usr/local/bin/discovery \
            -giturl "$(params.repository)" \
            -gitbranch "$(params.revision)" \
            -repodir $REPO_DIR_PATH  \
            -rigapi "${gitsecureUrl}" \
            -region "${TOOLCHAIN_REGION}" \
            -pipelineurl "${PIPELINE_URL}" \
            -iamurl "${IAM_URL}" \
            -runid "${PIPELINE_RUN_ID}" \
            -commitid "$(params.commit-id)" \
            -commitTimestamp "$(params.commit-timestamp)" \
            -toolchainid "${TOOLCHAIN_ID}" \
            -nodejs.createpackagelock="$(params.nodejs-create-package-lock)" \
            -python.createrequirementstxt="$(params.python-create-requirements-txt)" \
            -excludescopes "$(params.maven-exclude-scopes)" \
            -excludeconfigurations "$(params.gradle-exclude-configs)"
      volumeMounts:
        - mountPath: /config
          name: config-volume
        - mountPath: /var/run/
          name: docker-socket
        - mountPath: /properties
          name: environment-properties
        - mountPath: /secrets
          name: secure-properties
        - mountPath: /scripts
          name: retry-script

  sidecars:
    - image: docker:19.03-dind
      name: server
      securityContext:
        privileged: true
      env:
        # enable BUILDKIT Option
        - name: DOCKER_BUILDKIT
          value: 1
        # Write generated certs to the path shared with the client.
        - name: DOCKER_TLS_CERTDIR
          value: /certs
      volumeMounts:
        - mountPath: /var/run/
          name: docker-socket
      # Wait for the dind daemon to generate the certs it will share with the client.
      readinessProbe:
        periodSeconds: 1
        exec:
          command: ["ls", "/certs/client/ca.pem"]

  workspaces:
    - name: artifacts
      mountPath: /artifacts

  volumes:
    - name: config-volume
      configMap:
        name: toolchain
    - name: docker-socket
      emptyDir: {}
    - name: environment-properties
      configMap:
        name: $(params.continuous-delivery-context-environment)
    - name: secure-properties
      secret:
        secretName: $(params.continuous-delivery-context-secret)
    - name: retry-script
      configMap:
        name: retry-script
        items:
          - key: retry.sh
            path: retry.sh
