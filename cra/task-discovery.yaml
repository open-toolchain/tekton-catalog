---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cra-discovery
spec:
  params:
    - name: repository
      description: the git repo
    - name: revision
      description: the revision
      default: master
    - name: commit-id
      description: git commit id
    - name: commit-timestamp
      description: git commit timestamp
    - name: ibmcloud-api-key
      description: the IBM Cloud API key
      default: ""
    - name: pipeline-debug
      description: Pipeline debug mode
      default: "1"
    - name: directory-name
      description: directory name where the repository is cloned
    - name: pipeline-debug
      description: toggles debug mode for the pipeline
      default: "0"
      
  results:
    - name: status
      description: status of discovery task, possible value are-success|failure

  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)

  steps:
    - name: discovery
      image: icr.io/continuous-delivery/cra-discovery:main.1065
      imagePullPolicy: Always
      workingDir: "/artifacts"
      command: ["/bin/sh", "-c"]
      args:
        - |
          #!/bin/sh

          if [ "$PIPELINE_DEBUG" = "1" ]; then
            pwd
            env
            trap env EXIT
            set -x +e
          fi

          API_KEY=$(params.ibmcloud-api-key)
          REPO_DIR_PATH="/artifacts/$(params.directory-name)"

          TOOLCHAIN_REGION=$(cat /config/toolchain.json | jq -r '.region_id' | awk -F: '{print $3}')
          TOOLCHAIN_ID=$(cat /config/toolchain.json | jq -r '.toolchain_guid')
          REGION_ID=$(cat /config/toolchain.json | jq -r '.region_id')

          API_ENDPOINT="https://cloud.ibm.com"
          OTC_BROKER_BASE_URL="https://otcbroker.devopsinsights.cloud.ibm.com"
          if echo "${REGION_ID}" | grep -q "ys1"; then
            OTC_BROKER_BASE_URL="https://otcbroker.devopsinsights.dev.cloud.ibm.com"
            API_ENDPOINT="https://test.cloud.ibm.com"
            echo "targeting otc broker @ ${OTC_BROKER_BASE_URL}"
            echo "targeting ibm cloud @ ${API_ENDPOINT}"
          fi

          echo "Fetching users's token"
          ibmcloud config --check-version false
          ibmcloud login -a $API_ENDPOINT -r $TOOLCHAIN_REGION --apikey $API_KEY
          export IBM_CLOUD_BEARER=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token' | awk '{ print $2 }')

          echo "Fetching service urls for user's data"
          HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
            -X GET "${OTC_BROKER_BASE_URL}/globalauth/toolchainids/${TOOLCHAIN_ID}" \
            --header "Authorization: Bearer ${IBM_CLOUD_BEARER}")
          HTTP_STATUS=$(echo $HTTP_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          if [ "$HTTP_STATUS" -eq 401 -o "$HTTP_STATUS" -eq 403 ]; then
            echo ""
            echo "Error authenticating user for toolchain_id: ${TOOLCHAIN_ID}"
            echo "Please verify the Devops Insights card has been added to your toolchain and the api-key has access."
            exit 1
          fi
          
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo ""
            echo "Error! Please try again."
            exit 1
          fi

          HTTP_BODY=$(echo $HTTP_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')
          gitsecureUrl=$(echo ${HTTP_BODY} | jq -r '.service_urls.gitsecure')

          if [ -z "$gitsecureUrl" -o "$gitsecureUrl" = "null" ]; then
            echo ""
            echo "Error IBM Code Risk Analyzer is not supported in ${REGION_ID}"
            exit 1
          fi

          /usr/local/bin/discovery \
            -giturl "$(params.repository)" \
            -gitbranch "$(params.revision)" \
            -repodir $REPO_DIR_PATH  \
            -rigapi "${gitsecureUrl}" \
            -commitid "$(params.commit-id)" \
            -commitTimestamp "$(params.commit-timestamp)" \
            -toolchainid "${TOOLCHAIN_ID}"
      volumeMounts:
        - mountPath: /config
          name: config-volume
        - mountPath: /var/run/
          name: docker-socket

  sidecars:
    - image: docker:19.03-dind
      name: server
      securityContext:
        privileged: true
      env:
        # enable BUILDKIT Option
        - name: DOCKER_BUILDKIT
          value: 1
        # Write generated certs to the path shared with the client.  
        - name: DOCKER_TLS_CERTDIR
          value: /certs
      volumeMounts:
        - mountPath: /var/run/
          name: docker-socket
      # Wait for the dind daemon to generate the certs it will share with the client.
      readinessProbe:
        periodSeconds: 1
        exec:
          command: ["ls", "/certs/client/ca.pem"]

  workspaces:
    - name: artifacts
      mountPath: /artifacts

  volumes:
    - name: config-volume
      configMap:
        name: toolchain
    - name: docker-socket  
      emptyDir: {}
    
