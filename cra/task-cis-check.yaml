---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cra-cis-check
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: repository
      description: the git repo
    - name: revision
      description: the revision
      default: master
    - name: source-repository
      description: the source git repo which could be different in case of forked repo
      default: ""
    - name: commit-id
      description: git commit id
    - name: pr-url
      description: pull request html url
      default: ""
    - name: ibmcloud-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: continuous-delivery-context-secret
      description: Reference name for the secret resource
      default: "secure-properties"
    - name: git-access-token
      description: |
        (optional) token to access the git repository. If this token is provided, there will not be an attempt
        to use the git token obtained from the authorization flow when adding the git integration in the toolchain
      default: ""
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: ""
    - name: project-id
      description: for gitlab repository specify project-id
      default: ""
    - name: directory-name
      description: directory name where the repository is cloned
    - name: scm-type
      description: source code type used (github, github-ent, gitlab)
      default: "github-ent"
    - name: pipeline-debug
      description: Pipeline debug mode. Value can be 0 or 1. Default to 0
      default: "0"

  results:
    - name: status
      description: status of cis task, possible value are-success|failure
    - name: evidence-store
      description: filepath to store cis task evidence

  stepTemplate:
    env:
      - name: PIPELINE_RUN_ID
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)
  steps:
    - name: cis
      image: icr.io/continuous-delivery/cra-cis:release.2268
      env:
        - name: REPOSITORY
          value: $(params.repository)
        - name: SOURCE_REPOSITORY
          value: $(params.source-repository)
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.ibmcloud-apikey-secret-key)
              optional: true
      imagePullPolicy: Always
      workingDir: "/artifacts"
      command: ["/bin/sh", "-c"]
      args:
        - |
          #!/bin/sh
          if [ "$PIPELINE_DEBUG" == "1" ]; then
            pwd
            env
            trap env EXIT
            set -x +e
          fi

          REPO_DIR_PATH="/artifacts/$(params.directory-name)"

          TOOLCHAIN_CONFIG=$(cat /config/toolchain.json)
          TOOLCHAIN_REGION=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.region_id' | awk -F: '{print $3}')
          TOOLCHAIN_ID=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.toolchain_guid')
          REGION_ID=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.region_id')

          API_ENDPOINT="https://cloud.ibm.com"
          OTC_BROKER_BASE_URL="https://otcbroker.devopsinsights.cloud.ibm.com"
          if echo "${REGION_ID}" | grep -q "ys1"; then
            OTC_BROKER_BASE_URL="https://otcbroker.devopsinsights.dev.cloud.ibm.com"
            API_ENDPOINT="https://test.cloud.ibm.com"
            echo "targeting otc broker @ ${OTC_BROKER_BASE_URL}"
            echo "targeting ibm cloud @ ${API_ENDPOINT}"
          fi

          echo "Fetching users's token"
          ibmcloud config --check-version false
          sh /scripts/retry.sh ibmcloud login -a $API_ENDPOINT --no-region --apikey $API_KEY
          export IBM_CLOUD_BEARER=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token' | awk '{ print $2 }')

          echo "Fetching service urls for user's data"
          HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
            -X GET "${OTC_BROKER_BASE_URL}/globalauth/toolchainids/${TOOLCHAIN_ID}" \
            --header "Authorization: Bearer ${IBM_CLOUD_BEARER}")
          HTTP_STATUS=$(echo $HTTP_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          if [ "$HTTP_STATUS" -eq 401 -o "$HTTP_STATUS" -eq 403 ]; then
            echo ""
            echo "Error authenticating user for toolchain_id: ${TOOLCHAIN_ID}"
            echo "Please verify the Devops Insights card has been added to your toolchain and the api-key has access."
            exit 1
          fi

          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo ""
            echo "Error! Please try again."
            exit 1
          fi

          HTTP_BODY=$(echo $HTTP_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')
          gitsecureUrl=$(echo ${HTTP_BODY} | jq -r '.service_urls.gitsecure')

          if [ -z "$gitsecureUrl" -o "$gitsecureUrl" = "null" ]; then
            echo ""
            echo "Error IBM Code Risk Analyzer is not supported in ${REGION_ID}"
            exit 1
          fi

          # In case of CI pipeline, the source repository is not passed and defaults to ""
          GITURL=$SOURCE_REPOSITORY
          if [ "$GITURL" == "" ]; then
            GITURL=$REPOSITORY
          fi

          /usr/local/bin/deploy-analytic \
            -giturl "$GITURL" \
            -gitbranch "$(params.revision)" \
            -repodir $REPO_DIR_PATH \
            -apiservice "${gitsecureUrl}" \
            -runid "$PIPELINE_RUN_ID" \
            -commitid "$(params.commit-id)" \
            -results_status "$(results.status.path)" \
            -results_evidence "./gitsecure-cis-results.json" \
            -toolchainid "${TOOLCHAIN_ID}" \
            -comment_md "./gitsecure-cis-comment.md"

          echo -n "gitsecure-cis-results.json" > $(results.evidence-store.path)
          echo "COMMENT_FP=./gitsecure-cis-comment.md" >> /steps/next-step-env.properties

      volumeMounts:
        - mountPath: /config
          name: cd-config-volume
        - mountPath: /steps
          name: steps-volume
        - mountPath: /scripts
          name: retry-script
    - name: fetch-git-information
      image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6
      env:
        - name: REPOSITORY
          value: $(params.repository)
        - name: API_ENDPOINT
          value: $(params.ibmcloud-api)
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.ibmcloud-apikey-secret-key)
              optional: true
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          if [ "$PIPELINE_DEBUG" == "1" ]; then
              pwd
              env
              trap env EXIT
              set -x
          fi
          TOOLCHAIN_ID=$(jq -r '.toolchain_guid' /cd-config/toolchain.json)
          TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json | awk -F: '{print $3}')
          REGION_ID=$(jq -r '.region_id' /cd-config/toolchain.json)
          ##########################################################################
          # Setting HOME explicitly to have ibmcloud plugins available
          # doing the export rather than env definition is a workaround
          # until https://github.com/tektoncd/pipeline/issues/1836 is fixed
          export HOME="/root"
          ##########################################################################
          if [[ "$REPOSITORY" != *.git ]]; then
            echo "Adding .git suffix to Repository URL"
            REPOSITORY="${REPOSITORY}.git"
          fi
          GIT_SERVICE_INSTANCE_ID=$(jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .instance_id' /cd-config/toolchain.json)
          if [ -z "$GIT_SERVICE_INSTANCE_ID" ]; then
            echo "No Git integration (repository url: $REPOSITORY) found in the toolchain"
            exit 1
          fi
          GIT_SERVICE_TYPE=$(jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .service_id' /cd-config/toolchain.json)
          if [ "$GIT_SERVICE_TYPE" == "github" ]; then
            GIT_AUTH_USER="x-oauth-basic"
          elif [ "$GIT_SERVICE_TYPE" == "githubpublic" ]; then
            GIT_AUTH_USER="x-oauth-basic"
          elif [ "$GIT_SERVICE_TYPE" == "hostedgit" ]; then
            GIT_AUTH_USER="oauth2"
          elif [ "$GIT_SERVICE_TYPE" == "gitlab" ]; then
            GIT_AUTH_USER="oauth2"
          elif [ "$GIT_SERVICE_TYPE" == "bitbucketgit" ]; then
            GIT_AUTH_USER="x-token-auth"
          else
            GIT_AUTH_USER="x-token-auth"
          fi;
          GIT_TOKEN="$(params.git-access-token)"
          if [ -z "$GIT_TOKEN" ]; then
            if [[ "$REGION_ID" == *"ys1"* ]]; then
              API_ENDPOINT="https://test.cloud.ibm.com"
              echo "targeting ibm cloud @ ${API_ENDPOINT}"
            fi
            echo "Fetching token for $REPOSITORY"
            ibmcloud config --check-version false
            sh /scripts/retry.sh ibmcloud login -a $API_ENDPOINT --no-region --apikey $API_KEY
            if [ "$(params.resource-group)" ]; then
              ibmcloud target -g $(params.resource-group)
            fi
            TOKEN=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token')
            GIT_TOKEN_URL=$(jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .parameters.token_url' /cd-config/toolchain.json)
            # GIT_TOKEN_URL is like https://otc-github-consolidated-broker.us-south.devops.cloud.ibm.com/github/token?git_id=github
            # as there is already an url param git_id, just put the additional ones using &
            echo "Doing cURL to ${GIT_TOKEN_URL}&toolchain_id=${TOOLCHAIN_ID}&service_instance_id=${GIT_SERVICE_INSTANCE_ID}&repo_url=${REPOSITORY}"
            curl -s -o /steps/github_token_result.json -X GET -H "Accept: application/json" -H "Authorization: $TOKEN" "${GIT_TOKEN_URL}&toolchain_id=${TOOLCHAIN_ID}&service_instance_id=${GIT_SERVICE_INSTANCE_ID}&repo_url=${REPOSITORY}"
            if jq -e '.access_token' /steps/github_token_result.json > /dev/null 2>&1; then
              GIT_TOKEN=$(jq -r '.access_token' /steps/github_token_result.json)
              echo "Access token found for the Git integration (repository url: $REPOSITORY)"
            else
              echo "No access token found for the Git integration (repository url: $REPOSITORY)"
              cat /steps/github_token_result.json
              exit 1
            fi
          else
            echo "Using git Access Token provided"
          fi
          GIT_API_ROOT_URL=$(jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .parameters.api_root_url' /cd-config/toolchain.json)
          GIT_OWNER_ID=$(jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .parameters.owner_id' /cd-config/toolchain.json)
          GIT_REPO_NAME=$(jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .parameters.repo_name' /cd-config/toolchain.json)
          GIT_ID=$(jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .parameters.git_id' /cd-config/toolchain.json)
          TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json | awk -F: '{print $3}')
          echo "GIT_REPOSITORY=$REPOSITORY" >> /steps/next-step-env.properties
          echo "GIT_AUTH_USER=$GIT_AUTH_USER" >> /steps/next-step-env.properties
          echo "GIT_TOKEN=$GIT_TOKEN" >> /steps/next-step-env.properties
          echo "GIT_SERVICE_TYPE=$GIT_SERVICE_TYPE" >> /steps/next-step-env.properties
          echo "GIT_ID=$GIT_ID" >> /steps/next-step-env.properties
          echo "GIT_API_ROOT_URL=$GIT_API_ROOT_URL" >> /steps/next-step-env.properties
          echo "GIT_OWNER_ID=$GIT_OWNER_ID" >> /steps/next-step-env.properties
          echo "GIT_REPO_NAME=$GIT_REPO_NAME" >> /steps/next-step-env.properties
          echo "TOOLCHAIN_REGION=$TOOLCHAIN_REGION" >> /steps/next-step-env.properties
          if [ "$PIPELINE_DEBUG" == "1" ]; then
            cat /steps/next-step-env.properties
          fi
      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /steps
          name: steps-volume
        - mountPath: /scripts
          name: retry-script
    - name: comment-editor
      image: icr.io/continuous-delivery/cra-comm-editor:release.2264
      imagePullPolicy: Always
      workingDir: "/artifacts"
      command: ["/bin/sh", "-c"]
      args:
        - |
          #!/bin/sh
          source /steps/next-step-env.properties

          if [ -n "$(params.scm-type)" ]; then
            case "$(params.repository)" in
              *git.cloud.ibm.com*)
                if [ "$(params.scm-type)" != "gitlab" ]; then
                  echo "Error: Trigger type '$(params.scm-type)' expected to be gitlab"
                  exit 1
                fi
                ;;
              *ibm.com*)
                if [ "$(params.scm-type)" != "github-ent" ]; then
                  echo "Error: Trigger type '$(params.scm-type)' expected to be github-ent"
                  exit 1
                fi
                ;;
              *)
                if [ "$(params.scm-type)" != "github" ]; then
                  echo "Error: Trigger type '$(params.scm-type)' expected to be github"
                  exit 1
                fi
                ;;
            esac
          fi

          /usr/local/bin/comm-editor \
            -repo-url "$(params.repository)" \
            -pr-url "$(params.pr-url)" \
            -token "$GIT_TOKEN" \
            -comment-fp "$COMMENT_FP" \
            -project-id "$(params.project-id)" \
            -scm-type "$(params.scm-type)"

          COMM_RESULT=$?
          if [ "$COMM_RESULT" != "0" ]; then
            echo "Error posting comment to pull request"
            exit 1
          fi

      volumeMounts:
        - mountPath: /steps
          name: steps-volume

  workspaces:
    - name: artifacts
      mountPath: /artifacts
    - name: secrets
      mountPath: /secrets

  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: secrets
      secret:
        secretName: $(params.continuous-delivery-context-secret)
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
    - name: retry-script
      configMap:
        name: retry-script
        items:
          - key: retry.sh
            path: retry.sh
