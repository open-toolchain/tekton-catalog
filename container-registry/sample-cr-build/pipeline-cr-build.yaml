---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cr-build
spec:
  params:
    - name: repository
      description: the git repo
    - name: branch
      description: the branch for the git repo
    - name: path-to-dockerfile
      default: "."
    - name: pipeline-debug
      default: "0"
  resources:
    - name: app-image
      type: image
  workspaces:
    - name: pipeline-ws
  tasks:
    - name: pipeline-1-clone-task
      taskRef:
        name: git-clone-repo
      params:
        - name: repository
          value: $(params.repository)
        - name: branch
          value: $(params.branch)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: output
          workspace: pipeline-ws
    - name: pipeline-2-cr-build-task
      runAfter: [pipeline-1-clone-task]
      taskRef:
        name: icr-cr-build
      params:
        - name: path-to-context
          value: $(params.path-to-dockerfile)
        - name: path-to-dockerfile
          value: $(params.path-to-dockerfile)
        - name: additional-tags
          value: "latest"
        - name: additional-tags-script
          value: |
            # Include the clone task output variables in the environment
            source /artifacts/build.properties
            # The script is providing tag(s) as output
            # But logs can be written as error stderr
            echo "** Here is some Continuous Delivery Tekon Pipeline support configuration properties:" >&2
            ls -l /cd-config >&2
            ls -l /cd-config/environment-properties >&2
            ls -l /cd-config/secure-properties >&2
            echo "Providing an image tag including git branch and commit" >&2
            # Add a specific tag with branch and commit
            echo "1.0.0-${GIT_BRANCH}-${GIT_COMMIT}"
            # Add a specific tag with cd build number
            echo "1.0.0-${BUILD_NUMBER}"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: source
          workspace: pipeline-ws
      resources:
        outputs:
          - name: built-image
            resource: app-image
    - name: pipeline-3-va-task
      taskRef:
        name: icr-check-va-scan
      params:
        - name: scan-report-file
          value: "app-image-va-report.json"
        # - name: max-iteration
        #   value: '5'
        # - name: sleep-time
        #   value: '3'
        # - name: fail-on-scanned-issues
        #   value: 'false'
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
      resources:
        inputs:
          - name: image
            resource: app-image
            from:
              - pipeline-2-cr-build-task
