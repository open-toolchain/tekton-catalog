---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: icr-cr-build
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: continuous-delivery-context-secret
      description: Name of the secret containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: container-registry-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud container registry
      default: apikey
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: ""
    - name: image-url
      description: |
        url of the image to build
        required if no image pipeline resource provided or no registry region, namespace and image name parameters
        are provided to this task
      default: ""
    - name: registry-region
      description: container registry region id. required if no image-url or no image pipeline resources provided
      default: ""
    - name: registry-namespace
      description: container registry namespace. required if no image-url or no image pipeline resources provided
      default: ""
    - name: registry-create-namespace
      description: create container registry namespace if it doesn't already exists
      default: "true"
    - name: image-name
      description: image name. required if no image-url or no image pipeline resources provided
      default: ""
    - name: path-to-context
      description: the path to the context that is used for the build (default to `.` meaning current directory)
      default: .
    - name: path-to-dockerfile
      description: the path to the Dockerfile that is used for the build (default to `.` meaning current directory)
      default: .
    - name: dockerfile
      description: The name of the Dockerfile
      default: "Dockerfile"
    - name: build-args
      description: build argument list in the format 'KEY=VALUE' with a key-value pair per line.
      default: ""
    - name: additional-tags
      description: comma-separated list of additional-tags
      # can not be defined as an array because of variable substition error for array
      # https://github.com/tektoncd/pipeline/commit/86deacb04536f0f3e7176c6664cec8786678ed18
      default: ""
    - name: additional-tags-script
      description: Shell script that allows to add tags for the image to be build.
      default: ""
    - name: properties-file
      description: file containing properties out of containerize task
      default: build.properties
    - name: pipeline-debug
      description: Pipeline debug mode. Value can be 0 or 1. Default to 0
      default: "0"
  results:
    - name: image-repository
      description: the repository for the built image
    - name: image-tags
      description: the tags for the built image
    - name: image-digest
      description: the image digest (sha-256 hash) for the built image
  workspaces:
    - name: source
      description: A workspace containing the source (Dockerfile, Docker context) to create the image
      mountPath: /artifacts
  resources:
    outputs:
      - name: built-image
        type: image
        description: "(Optional) The image to build"
        optional: true
  steps:
    - name: check-registry-and-build-image
      image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.7
      workingDir: /artifacts
      env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.container-registry-apikey-secret-key)
        - name: IBMCLOUD_API
          value: $(params.ibmcloud-api)
        - name: IBMCLOUD_RESOURCE_GROUP
          value: $(params.resource-group)
        - name: PROPERTIES_FILE
          value: $(params.properties-file)
        - name: REGISTRY_CREATE_NAMESPACE
          value: $(params.registry-create-namespace)
        - name: PIPELINE_DEBUG
          value: $(params.pipeline-debug)
        # CD execution context injection
        - name: PIPELINE_RUN_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']
        - name: PIPELINE_RUN_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: PIPELINE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
        - name: TRIGGER_TYPE
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-type']
        - name: TRIGGER_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-name']
        - name: TRIGGERED_BY
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/triggered-by']
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail

          if [ $PIPELINE_DEBUG == 1 ]; then
              pwd
              env
              trap env EXIT
              set -x
          fi

          ##########################################################################
          # Setting HOME explicitly to have ibmcloud plugins available
          # doing the export rather than env definition is a workaround
          # until https://github.com/tektoncd/pipeline/issues/1836 is fixed
          export HOME="/root"
          ##########################################################################

          if [ "$(resources.outputs.built-image.url)" == "" ]; then
            export IMAGE_RESOURCE_URL="$(params.image-url)"
          else
            export IMAGE_RESOURCE_URL="$(resources.outputs.built-image.url)"
          fi

          if [ "$IMAGE_RESOURCE_URL" ]; then
            # Parse the image url to find registry information
            source /scripts/parse_image_url.sh
          else
            # export the expected environment variables based on the required registry parameters
            # if registry region is in the 'ibm:yp:<region>' just keep the region part
            export REGISTRY_REGION=$(echo "$(params.registry-region)" | awk -F ':' '{print $NF;}')

            if [ -z "$REGISTRY_REGION" ]; then
              echo "No registry region provided"
              exit 1
            fi
            export REGISTRY_NAMESPACE=$(params.registry-namespace)
            if [ -z "$REGISTRY_NAMESPACE" ]; then
              echo "No registry namespace provided"
              exit 1
            fi
          fi

          # Login to the container registry and ensure namespace is available
          source /scripts/check_registry.sh

          if [ -z "$IMAGE_RESOURCE_URL" ]; then
            export IMAGE_NAME=$(params.image-name)
            if [ -z "$IMAGE_NAME" ]; then
              echo "No image name provided"
              exit 1
            fi
            # export the expected environment variables now that the container registry is logged in
            export REGISTRY_URL=$(ibmcloud cr info | grep -m1 -i '^Container Registry' | awk '{print $3;}')
            export IMAGE_URL="${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}"
          fi

          # Manage multiple tags for an image
          # Add dynamically computed tags
          printf "#!/bin/bash\n" > /steps/additionalTags.sh
          printf "%s " '$(params.additional-tags-script)' >> /steps/additionalTags.sh
          chmod +x /steps/additionalTags.sh

          # Send stdout to the tags list; don't touch stderr.
          /steps/additionalTags.sh >/steps/tags.lst

          # Add image pipeline resource
          if [ "${IMAGE_TAG}" ]; then
            echo "${IMAGE_TAG}" >> /steps/tags.lst
          fi
          # Add tags provided using task parameter
          if [ "$(params.additional-tags)" ];  then
            echo "$(params.additional-tags)" | sed 's/,/\n/g' >> /steps/tags.lst
          fi
          echo "#######################"
          echo "Image Tags:"
          cat /steps/tags.lst
          echo "#######################"
          # Add the full image url with tags - use # as separator in case IMAGE_NAME contains /
          sed -i "s#^#$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:#" /steps/tags.lst
          sort -u -o /steps/tags.lst /steps/tags.lst
          echo "#######################"

          if [ -s /steps/tags.lst ]; then
            echo "Image tags:"
            cat /steps/tags.lst
          else
            # Force a minimal tag for the image build
            echo "$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:latest" > /steps/tags.lst
            echo "Define a minimal image tag: $REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:latest"
          fi

          BUILD_ARG_LIST='$(params.build-args)'
          for buildArg in $BUILD_ARG_LIST; do
            BUILD_ARGS="${BUILD_ARGS} --build-arg $buildArg "
          done

          # Build the image using ibmcloud cr build for the first tag in the file
          ibmcloud cr build \
            ${BUILD_ARGS} \
            --file $(params.path-to-dockerfile)/$(params.dockerfile) \
            --tag $(head --lines=1 /steps/tags.lst) \
            $(params.path-to-context)

          # Create remaining tags for the image
          for tag in $(tail --lines=+2 /steps/tags.lst)
          do
            ibmcloud cr image-tag $(head --lines=1 /steps/tags.lst) $tag
          done

          IMAGE_TAG=$(head --lines=1 /steps/tags.lst |  awk -F: '{print $2}')
          echo "**"
          echo "** ibmcloud cr image-digests --restrict ${REGISTRY_NAMESPACE}/${IMAGE_NAME}"
          ibmcloud cr image-digests --restrict ${REGISTRY_NAMESPACE}/${IMAGE_NAME}
          echo -n "** ibmcloud cr image-digests --restrict ${REGISTRY_NAMESPACE}/${IMAGE_NAME}"
          echo " --format '{{ .Repository}}:{{ .Tags }} {{ .Digest }}'"
          ibmcloud cr image-digests --restrict ${REGISTRY_NAMESPACE}/${IMAGE_NAME} \
            --format '{{ .Repository}}:{{ .Tags }} {{ .Digest }}'
          echo "**"
          MANIFEST_SHA=$(ibmcloud cr image-digests --restrict ${REGISTRY_NAMESPACE}/${IMAGE_NAME} \
            --format '{{ .Repository}}:{{ .Tags }} {{ .Digest }}' | grep "${IMAGE_TAG}" | awk '{print $NF}')

          # Because of https://github.com/tektoncd/pipeline/issues/216
          # the image digest for input is/will always empty
          # there was an alternative/workaround but it is updating using a specific account
          # and using a kubectl command to update the resources
          # see https://github.com/nlewo/poc-tekton#deploy-tasks
          # https://raw.githubusercontent.com/tektoncd/catalog/0b48da8e336a4214aff46af242658dc056199b1c/update-image-digests/image-digest-updater.yaml
          # https://raw.githubusercontent.com/tektoncd/catalog/0b48da8e336a4214aff46af242658dc056199b1c/update-image-digests/update-image-digests.yaml
          # Here the workaround will be to add registry and image information in an output properties file
          IMAGE_TAGS=$(sed "s#^$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:##" /steps/tags.lst | \
            tr -s '\r\n' ',' | sed -e 's/,$/\n/')
          if [ "$PROPERTIES_FILE" ]; then
            cd /artifacts
            # Ensure directory is there
            mkdir -p /artifacts/$(dirname "$PROPERTIES_FILE")
            echo "REGISTRY_URL=${REGISTRY_URL}" >> $PROPERTIES_FILE
            echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}" >> $PROPERTIES_FILE
            echo "REGISTRY_REGION=${REGISTRY_REGION}" >> $PROPERTIES_FILE
            echo "IMAGE_NAME=${IMAGE_NAME}" >> $PROPERTIES_FILE
            echo "IMAGE_TAGS=$IMAGE_TAGS" >> $PROPERTIES_FILE
            echo "IMAGE_MANIFEST_SHA=${MANIFEST_SHA}" >> $PROPERTIES_FILE
            echo "$PROPERTIES_FILE content:"
            cat $PROPERTIES_FILE
          fi

          # Record task results
          echo -n "${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}" > $(results.image-repository.path)
          echo -n "${IMAGE_TAGS}" > $(results.image-tags.path)
          echo -n "${MANIFEST_SHA}" > $(results.image-digest.path)
      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /steps
          name: steps-volume
        - mountPath: /scripts
          name: check-registry-scripts
        - name: environment-properties
          mountPath: /cd-config/environment-properties
        - name: secure-properties
          mountPath: /cd-config/secure-properties
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
    - name: check-registry-scripts
      configMap:
        name: check-registry-scripts
        items:
          - key: check_registry.sh
            path: check_registry.sh
          - key: parse_image_url.sh
            path: parse_image_url.sh
    - name: environment-properties
      configMap:
        name: environment-properties
    - name: secure-properties
      secret:
        secretName: secure-properties
