apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: execute-in-dind-task
spec:
  inputs:
    params:
      - name: task-pvc
        description: the task pvc - this is the volume where the files (Dockerfile etc..) are expected to be
      - name: ibmcloudApi
        description: the ibmcloud api
        default: https://cloud.ibm.com
      - name: continuous-delivery-context-secret
        description: name of the secret containing the continuous delivery pipeline context secrets
        default: cd-secret
      - name: container-registry-apikey-secret-key
        description: field in the secret that contains the api key used to login to ibmcloud container registry
        default: 'API_KEY'
      - name: resourceGroup
        description: target resource group (name or id) for the ibmcloud login operation
        default: ''
      #
      - name: image-url
        description: "url of the image to build - required if no image pipeline resource provided to this task"
        default: ""
      - name: imageTag
        description: the default image tag if none is provided using the builtImage url
        default: latest
      # Dockerfile location
      - name: pathToContext
        default: .
      - name: pathToDockerfile
        description: the path to the Docker file
        default: .
      - name: dockerfile
        description: The name of the Dockerfile
        default: "Dockerfile"
      # Docker Client configuration
      - name: dockerClientImage
        description: The Docker image to use to run the Docker client
        default: docker
      # Docker commands
      - name: dockerCommands
        description: The docker command(s) to run.
        default: |
          # Default docker build / inspect / push command
          docker build --tag "$IMAGE_URL:$IMAGE_TAG" --file $PATH_TO_DOCKERFILE/$DOCKERFILE $PATH_TO_CONTEXT
          docker inspect ${IMAGE_URL}:${IMAGE_TAG}
          docker push ${IMAGE_URL}:${IMAGE_TAG}
      #
      - name: propertiesFile
        description: file containing properties out of the docker in docker task
        default: build.properties
  outputs:
    resources:
      - name: builtImage
        type: image
        description: "(Optional) The image to build"
        optional: true
  steps:
    - name: check-registry
      image: ibmcom/pipeline-base-image:2.6
      workingDir: /steps
      env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(inputs.params.continuous-delivery-context-secret)
              key: $(inputs.params.container-registry-apikey-secret-key)
        - name: IBMCLOUD_API
          value: $(inputs.params.ibmcloudApi)
        - name: IBMCLOUD_RESOURCE_GROUP
          value: $(inputs.params.resourceGroup)
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          ##########################################################################
          # Setting HOME explicitly to have ibmcloud plugins available
          # doing the export rather than env definition is a workaround
          # until https://github.com/tektoncd/pipeline/issues/1836 is fixed
          export HOME="/root"
          ##########################################################################

          if [ "$(outputs.resources.builtImage.url)" == "" ]; then
            export IMAGE_RESOURCE_URL="$(inputs.params.image-url)"
          else
            export IMAGE_RESOURCE_URL="$(outputs.resources.builtImage.url)"
          fi

          # Ensure login to the container registry and namespace available
          source /scripts/check_registry.sh

          # create a dry-run k8s secret of type docker-registry to obtain
          # the content of a docker config.json file to access the target
          # ibmcloud container registry
          echo "Creating a Kubernetes secret to access the IBM Cloud Container Registry."
          kubectl create secret --dry-run=true --output=json \
            docker-registry registry-dockerconfig-secret \
            --docker-server=${REGISTRY_URL} \
            --docker-password=${API_KEY} \
            --docker-username=iamapikey --docker-email=a@b.com | \
          jq -r '.data[".dockerconfigjson"]' | base64 -d > config.json

          echo ""
          echo "Secret created."
      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /steps
          name: steps-volume
        - mountPath: /scripts
          name: check-registry-script
    - name: run-docker-commands
      image: $(inputs.params.dockerClientImage)
      workingDir: /artifacts
      env:
        - name: PROPERTIES_FILE
          value: $(inputs.params.propertiesFile)
        # variabled exposed to docker command
        - name: PATH_TO_CONTEXT
          value: $(inputs.params.pathToContext)
        - name: PATH_TO_DOCKERFILE
          value: $(inputs.params.pathToDockerfile)
        - name: DOCKERFILE
          value: $(inputs.params.dockerfile)
        # Docker client configuration
        # Connect to the sidecar over TCP, with TLS.
        - name: DOCKER_HOST
          value: 'tcp://localhost:2376'
        # Verify TLS.
        - name: DOCKER_TLS_VERIFY
          value: '1'
        # Use the certs generated by the sidecar daemon.
        - name: DOCKER_CERT_PATH
          value: /certs/client
        # The location of the client configuration files.
        - name: DOCKER_CONFIG
          value: /steps
        # CD execution context injection
        - name: PIPELINE_RUN_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']
        - name: PIPELINE_RUN_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: PIPELINE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
        - name: TRIGGER_TYPE
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-type']
        - name: TRIGGER_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-name']
        - name: TRIGGERED_BY
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/triggered-by']
      command: ["/bin/sh", "-c"]
      args:
        - |
          set -e -o pipefail

          if [ "$(outputs.resources.builtImage.url)" == "" ]; then
            export IMAGE_RESOURCE_URL="$(inputs.params.image-url)"
          else
            export IMAGE_RESOURCE_URL="$(outputs.resources.builtImage.url)"
          fi

          # Parse the image url to find information (region, namespace, image name and eventually tag)
          # as url of Image PipelineResource is the complete path to the image, including the registry
          # and the image tag - https://github.com/tektoncd/pipeline/blob/v0.10.1/docs/resources.md#image-resource
          IMAGE_URL=$(echo $IMAGE_RESOURCE_URL |  awk -F: '{print $1}')
          IMAGE_TAG=$(echo $IMAGE_RESOURCE_URL |  awk -F: '{print $2}')
          if [ -z "$IMAGE_TAG" ]; then
            IMAGE_TAG="$(inputs.params.imageTag)"
          fi
          echo "Image URL: $IMAGE_URL"
          echo "Image tag: $IMAGE_TAG"
          echo ""

          # run docker command(s) passed as parameter
          echo "Running docker command(s)..."
          echo ""

          $(inputs.params.dockerCommands)

          echo ""
          # Persist registry and image information in an output properties file
          REGISTRY_URL=$(echo $IMAGE_RESOURCE_URL |  awk -F/ '{print $1}')
          REGISTRY_NAMESPACE=$(echo $IMAGE_RESOURCE_URL |  awk -F/ '{print $2}')
          # Image name is remaining part after the repository and namespace and can contains /
          IMAGE_NAME=$(echo $IMAGE_URL |  awk -F/ '{a=match($0, $3); print substr($0,a)}')
          MANIFEST_SHA=$(docker inspect "$IMAGE_URL:$IMAGE_TAG"  --format='{{index .RepoDigests 0 }}' | awk -F@ '{print $2}')

          if [ "$PROPERTIES_FILE" ]; then
            # Ensure directory is there
            mkdir -p /artifacts/$(dirname "$PROPERTIES_FILE")
            touch /artifacts/$PROPERTIES_FILE
            echo "REGISTRY_URL=${REGISTRY_URL}" >> /artifacts/$PROPERTIES_FILE
            echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}" >> /artifacts/$PROPERTIES_FILE
            echo "IMAGE_NAME=${IMAGE_NAME}" >> /artifacts/$PROPERTIES_FILE
            echo "IMAGE_TAGS=${IMAGE_TAG}" >> /artifacts/$PROPERTIES_FILE
            echo "IMAGE_MANIFEST_SHA=${MANIFEST_SHA}" >> /artifacts/$PROPERTIES_FILE
            echo "$PROPERTIES_FILE content:"
            cat /artifacts/$PROPERTIES_FILE
            echo ""
          fi
          echo "Done."
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /steps
          name: steps-volume
        - mountPath: /certs/client
          name: dind-certs
  sidecars:
    - image: docker:dind
      name: server
      securityContext:
        privileged: true
      env:
        # Write generated certs to the path shared with the client.
        - name: DOCKER_TLS_CERTDIR
          value: /certs
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs
      # Wait for the dind daemon to generate the certs it will share with the client.
      readinessProbe:
        periodSeconds: 1
        exec:
          command: ["ls", "/certs/client/ca.pem"]
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
    - name: steps-volume
      emptyDir: {}
    - name: dind-certs
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
        - key: toolchain.json
          path: toolchain.json
    - name: check-registry-script
      configmap: 
        name: check-registry-script
        items: 
        - key: check_registry.sh
          path: check_registry.sh