---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: icr-containerize
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: continuous-delivery-context-secret
      description: Name of the secret containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: container-registry-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud container registry
      default: apikey
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: ""
    - name: image-url
      description: |
        url of the image to build
        required if no image pipeline resource provided or no registry region, namespace and image name parameters
        are provided to this task
      default: ""
    - name: registry-region
      description: container registry region id. required if no image-url or no image pipeline resources provided
      default: ""
    - name: registry-namespace
      description: container registry namespace. required if no image-url or no image pipeline resources provided
      default: ""
    - name: registry-create-namespace
      description: create container registry namespace if it doesn't already exists
      default: "true"
    - name: image-name
      description: image name. required if no image-url or no image pipeline resources provided
      default: ""
    - name: path-to-context
      default: .
    - name: path-to-dockerfile
      default: .
    - name: dockerfile
      description: The name of the Dockerfile
      default: "Dockerfile"
    - name: build-args
      description: build argument list in the format 'KEY=VALUE' with a key-value pair per line.
      default: ""
    - name: buildkit-image
      description: The name of the BuildKit image
      default: "moby/buildkit:v0.6.3-rootless"
    - name: additional-tags
      description: comma-separated list of additional-tags
      # can not be defined as an array because of variable substition error for array
      # https://github.com/tektoncd/pipeline/commit/86deacb04536f0f3e7176c6664cec8786678ed18
      default: ""
    - name: additional-tags-script
      description: Shell script that allows to add tags for the image to be build.
      default: ""
    - name: properties-file
      description: file containing properties out of containerize task
      default: build.properties
    - name: pipeline-debug
      description: Pipeline debug mode
      default: "0"
  results:
    - name: image-repository
      description: the repository for the built image
    - name: image-tags
      description: the tags for the built image
    - name: image-digest
      description: the image digest (sha-256 hash) for the built image
  workspaces:
    - name: source
      description: A workspace containing the source (Dockerfile, Docker context) to create the image
      mountPath: /artifacts
  resources:
    outputs:
      - name: built-image
        type: image
        description: "(Optional) The image to build"
        optional: true
  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)
  steps:
    - name: check-registry
      image: ibmcom/pipeline-base-image:2.9
      workingDir: /steps
      env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.container-registry-apikey-secret-key)
        - name: IBMCLOUD_API
          value: $(params.ibmcloud-api)
        - name: IBMCLOUD_RESOURCE_GROUP
          value: $(params.resource-group)
        - name: REGISTRY_CREATE_NAMESPACE
          value: $(params.registry-create-namespace)
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail

          if [ $PIPELINE_DEBUG == 1 ]; then
              pwd
              env
              trap env EXIT
              set -x
          fi

          ##########################################################################
          # Setting HOME explicitly to have ibmcloud plugins available
          # doing the export rather than env definition is a workaround
          # until https://github.com/tektoncd/pipeline/issues/1836 is fixed
          export HOME="/root"
          ##########################################################################

          if [ "$(resources.outputs.built-image.url)" == "" ]; then
            export IMAGE_RESOURCE_URL="$(params.image-url)"
          else
            export IMAGE_RESOURCE_URL="$(resources.outputs.built-image.url)"
          fi

          if [ "$IMAGE_RESOURCE_URL" ]; then
            # Parse the image url to find registry information
            source /scripts/parse_image_url.sh
          else
            # export the expected environment variables based on the required registry parameters
            # if registry region is in the 'ibm:yp:<region>' just keep the region part
            export REGISTRY_REGION=$(echo "$(params.registry-region)" | awk -F ':' '{print $NF;}')

            if [ -z "$REGISTRY_REGION" ]; then
              echo "No registry region provided"
              exit 1
            fi
            export REGISTRY_NAMESPACE=$(params.registry-namespace)
            if [ -z "$REGISTRY_NAMESPACE" ]; then
              echo "No registry namespace provided"
              exit 1
            fi
          fi

          # Login to the container registry and ensure namespace is available
          source /scripts/check_registry.sh

          if [ -z "$IMAGE_RESOURCE_URL" ]; then
            export IMAGE_NAME=$(params.image-name)
            if [ -z "$IMAGE_NAME" ]; then
              echo "No image name provided"
              exit 1
            fi
            # export the expected environment variables now that the container registry is logged in
            export REGISTRY_URL=$(ibmcloud cr info | grep -m1 -i '^Container Registry' | awk '{print $3;}')
            export IMAGE_URL="${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}"
          fi

          # create a dry-run k8s secret of type docker-registry to obtain
          # the content of a docker config.json file to access the target
          # ibmcloud container registry
          kubectl create secret --dry-run=true --output=json \
            docker-registry registry-dockerconfig-secret \
            --docker-server=${REGISTRY_URL} \
            --docker-password=${API_KEY} \
            --docker-username=iamapikey --docker-email=a@b.com | \
          jq -r '.data[".dockerconfigjson"]' | base64 -d > config.json

          echo "REGISTRY_URL=${REGISTRY_URL}" > next-step-env.properties
          echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}" >> next-step-env.properties
          echo "REGISTRY_REGION=${REGISTRY_REGION}" >> next-step-env.properties
          echo "IMAGE_URL=${IMAGE_URL}" >> next-step-env.properties
          echo "IMAGE_TAG=${IMAGE_TAG}" >> next-step-env.properties
          echo "IMAGE_NAME=${IMAGE_NAME}" >> next-step-env.properties
      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /steps
          name: steps-volume
        - mountPath: /scripts
          name: check-registry-scripts
    - name: build-image
      image: $(params.buildkit-image)
      workingDir: /artifacts
      env:
        # specifying DOCKER_CONFIG is required to allow buildkit to detect docker credentials
        - name: DOCKER_CONFIG
          value: /steps
        # CD execution context injection
        - name: PIPELINE_RUN_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']
        - name: PIPELINE_RUN_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: PIPELINE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
        - name: TRIGGER_TYPE
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-type']
        - name: TRIGGER_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-name']
        - name: TRIGGERED_BY
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/triggered-by']
      securityContext:
        privileged: true
      command: ["/bin/sh", "-c"]
      args:
        - |
          if [ $PIPELINE_DEBUG == 1 ]; then
              pwd
              env
              trap env EXIT
              set -x
          fi

          source /steps/next-step-env.properties
          export $(cut -d= -f1 /steps/next-step-env.properties)

          # Manage multiple tags for an image
          # Add dynamically computed tags
          printf "#!/bin/sh\n" > /steps/additionalTags.sh
          printf "%s " '$(params.additional-tags-script)' >> /steps/additionalTags.sh
          chmod +x /steps/additionalTags.sh

          # Send stdout to the tags list; don't touch stderr.
          /steps/additionalTags.sh > /steps/tags.lst

          # Add image pipeline resource
          if [ "${IMAGE_TAG}" ]; then
            echo "${IMAGE_TAG}" >> /steps/tags.lst
          fi
          # Add tags provided using task parameter
          if [ "$(params.additional-tags)" ];  then
            echo "$(params.additional-tags)" | sed 's/,/\n/g' >> /steps/tags.lst
          fi
          echo "#######################"
          echo "Image Tags:"
          cat /steps/tags.lst
          echo "#######################"
          IMAGE_REPOSITORY="$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME"
          # Add the full image url with tags - use # as separator in case IMAGE_NAME contains /
          sed -i "s#^#$IMAGE_REPOSITORY:#" /steps/tags.lst
          sort -u -o /steps/tags.lst /steps/tags.lst
          echo "Full Image URLs:"
          cat /steps/tags.lst
          echo "#######################"
          BUILDKIT_IMAGE_NAMES=$(tr -s '\r\n' ',' < /steps/tags.lst | sed -e 's/,$/\n/')
          if [ -z "$BUILDKIT_IMAGE_NAMES" ]; then
            # Set default image name for buildkit to push
            BUILDKIT_IMAGE_NAMES="$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME"
          fi
          echo "Buildkit Image names: $BUILDKIT_IMAGE_NAMES"

          BUILD_ARG_LIST='$(params.build-args)'
          for buildArg in $BUILD_ARG_LIST; do
            BUILD_ARGS="${BUILD_ARGS} --opt build-arg:$buildArg "
          done

          buildctl-daemonless.sh build \
            --progress=plain \
            --frontend=dockerfile.v0 \
            --opt filename=$(params.dockerfile) \
            ${BUILD_ARGS} \
            --local context=$(workspaces.source.path)/$(params.path-to-context) \
            --local dockerfile=$(workspaces.source.path)/$(params.path-to-dockerfile) \
            --exporter=image --exporter-opt "name=$BUILDKIT_IMAGE_NAMES" --exporter-opt "push=true" \
            --export-cache type=inline \
            --import-cache type=registry,ref=$IMAGE_REPOSITORY 2>&1 | tee /steps/build.log

          # Using the deprecated --exporter option for now as the multiple name/tags using --output option
          # is not working as expected: https://github.com/moby/buildkit/issues/797#issuecomment-581346240
          # --output type=image,"name=$(params.image-url):1.0.0,$(params.image-url)",push=true

          # it is not possible to specify multiple exporters for now
          # --output type=oci,dest=/builder/home/image-outputs/built-image/output.tar \
          # It is possible to assign multiple tags to the image with latest version of buildkit-image
          # see https://github.com/moby/buildkit/issues/797

      volumeMounts:
        - mountPath: /steps
          name: steps-volume
    - name: process-build-log
      # An image including only jq should be sufficient
      image: ibmcom/pipeline-base-image:2.9
      workingDir: /steps
      env:
        - name: PROPERTIES_FILE
          value: $(params.properties-file)
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail

          if [ $PIPELINE_DEBUG == 1 ]; then
              pwd
              env
              trap env EXIT
              set -x
          fi

          source /steps/next-step-env.properties
          export $(cut -d= -f1 /steps/next-step-env.properties)

          # buildctl/buildkit does not provide an index.json as part of the output
          # https://github.com/moby/buildkit/issues/1158 and https://github.com/moby/buildkit/issues/993
          # https://github.com/moby/buildkit/pull/1315
          # unfortunately, this is needed for Tekton Image Pipeline Resource
          # https://github.com/tektoncd/pipeline/blob/v0.7.0/docs/resources.md#image-resource
          # so workaround for now is to process the buildkit log to find the required information

          MANIFEST_SHA=$(grep -i 'exporting manifest' build.log | grep -i 'done' | awk '{print $4}')
          CONFIG_SHA=$(grep -i 'exporting config' build.log | grep -i 'done' | awk '{print $4}')
          FULLY_QUALIFIED_IMAGE=$(grep -i 'pushing manifest' build.log | grep -i 'done' | awk '{print $5}')

          if [ "$(resources.outputs.built-image.url)" ]; then
            echo "Creating OCI image index - index.json - out of the build.log to reference image sha: $MANIFEST_SHA"
            # ibmcloud container-registry image manifest is: application/vnd.docker.distribution.manifest.v2+json
            echo "{}" | \
            jq --arg manifest_sha "$MANIFEST_SHA" \
              '{schemaVersion:2,manifests:[{"mediaType": "application/vnd.oci.image.manifest.v1+json", digest:$manifest_sha}]}' 2>&1 | \
              tee /workspace/output/built-image/index.json

            # Copy the index.json to the legacy location - v0.7.0 - for such imageoutput
            mkdir -p /builder/home/image-outputs/built-image
            cp /workspace/output/built-image/index.json /builder/home/image-outputs/built-image
          fi

          # Because of https://github.com/tektoncd/pipeline/issues/216
          # the image digest for input is/will always empty
          # there was an alternative/workaround but it is updating using a specific account
          # and using a kubectl command to update the resources
          # see https://github.com/nlewo/poc-tekton#deploy-tasks
          # https://raw.githubusercontent.com/tektoncd/catalog/0b48da8e336a4214aff46af242658dc056199b1c/update-image-digests/image-digest-updater.yaml
          # https://raw.githubusercontent.com/tektoncd/catalog/0b48da8e336a4214aff46af242658dc056199b1c/update-image-digests/update-image-digests.yaml
          # Here the workaround will be to add registry and image information in an output properties file
          IMAGE_TAGS=$(grep -i 'pushing manifest' /steps/build.log | grep -i 'done' | awk '{print $5}' | \
            awk -F: '{print $2}' | tr -s '\r\n' ',' | sed -e 's/,$/\n/')
          if [ "$PROPERTIES_FILE" ]; then
            mkdir -p $(workspaces.source.path)/$(dirname "$PROPERTIES_FILE")
            echo "REGISTRY_URL=${REGISTRY_URL}" >> $(workspaces.source.path)/$PROPERTIES_FILE
            echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}" >> $(workspaces.source.path)/$PROPERTIES_FILE
            echo "REGISTRY_REGION=${REGISTRY_REGION}" >> $(workspaces.source.path)/$PROPERTIES_FILE
            echo "IMAGE_NAME=${IMAGE_NAME}" >> $(workspaces.source.path)/$PROPERTIES_FILE
            echo "IMAGE_TAGS=${IMAGE_TAGS}" >> $(workspaces.source.path)/$PROPERTIES_FILE
            echo "IMAGE_MANIFEST_SHA=${MANIFEST_SHA}" >> $(workspaces.source.path)/$PROPERTIES_FILE
            echo "$PROPERTIES_FILE content:"
            cat $(workspaces.source.path)/$PROPERTIES_FILE
            echo ""
          fi

          # Record task results
          echo -n "${IMAGE_URL}" > $(results.image-repository.path)
          echo -n "${IMAGE_TAGS}" > $(results.image-tags.path)
          echo -n "${MANIFEST_SHA}" > $(results.image-digest.path)
      volumeMounts:
        - mountPath: /steps
          name: steps-volume
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
    - name: check-registry-scripts
      configMap:
        name: check-registry-scripts
        items:
          - key: check_registry.sh
            path: check_registry.sh
          - key: parse_image_url.sh
            path: parse_image_url.sh
