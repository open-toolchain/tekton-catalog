apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: task-dind-custom
spec:
  inputs:
    params:
      - name: task-pvc
        description: the output pvc
      - name: custom-image
        description: The Docker image to use
        default: docker
      - name: ibmcloudApi
        description: the ibmcloud api
        default: https://cloud.ibm.com
      - name: registryUrl
        description: the Container Registry URL
        default: us.icr.io        
      - name: registryNameSpace
        description: the Container Registry NameSpace
      - name: imageName
        description: the image name
      - name: imageTag
        description: the image tag
        default: latest
      - name: continuous-delivery-context-secret
        description: name of the configmap containing the continuous delivery pipeline context secrets
        default: cd-secret
      - name: resourceGroup
        description: target resource group (name or id) for the ibmcloud login operation
        default: ''
      - name: additionalTags
        description: comma-separated list of additionalTags
        # can not be defined as an array because of variable substition error for array
        # https://github.com/tektoncd/pipeline/commit/86deacb04536f0f3e7176c6664cec8786678ed18
        default: ''
      - name: additionalTagsScript
        description: Shell script that allows to add tags for the image to be build.
        default: ''
      - name: propertiesFile
        description: file containing properties out of containerize task
        default: build.properties
    # resources:
    #   # TODO consider an optional git repository as the source of the image to build
    #   # when cd tekton support will be to tekton pipeline v 0.10
    #   - name: workspace
    #     type: git
    #     optional: true
  steps:
    - name: check-registry
      image: ibmcom/pipeline-base-image
      workingDir: /steps
      env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(inputs.params.continuous-delivery-context-secret)
              key: API_KEY
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json | awk -F: '{print $3}')
          ##########################################################################
          # Setting HOME explicitly to have ibmcloud plugins available
          # doing the export rather than env definition is a workaround
          # until https://github.com/tektoncd/pipeline/issues/1836 is fixed
          export HOME="/root"
          ##########################################################################
          IMAGE_TAG=$(inputs.params.imageTag)
          REGISTRY_URL=$(inputs.params.registryUrl)
          REGISTRY_NAMESPACE=$(registryNameSpace)
          IMAGE_NAME=$(inputs.params.imageName)

          # Find the ibmcloud container registry region
          # https://cloud.ibm.com/docs/services/Registry?topic=registry-registry_overview#registry_regions_local
          if [[ $REGISTRY_URL =~ ^registry\.[a-z]*.bluemix.net$ ]]; then
            # deprecated domain name
            REGISTRY_REGION=$(echo $REGISTRY_URL | awk -F. '{print $2}')
            if [ "$REGISTRY_REGION" == "ng" ]; then
              REGISTRY_REGION="us-south"
            fi
          else
            export REGISTRY_REGION=$(echo $REGISTRY_URL | awk -F. '{print $1}')
            if [ "$REGISTRY_REGION" == "jp" ]; then
              REGISTRY_REGION="ap-north"
            elif [ "$REGISTRY_REGION" == "au" ]; then
              REGISTRY_REGION="ap-south"
            elif [ "$REGISTRY_REGION" == "de" ]; then
              REGISTRY_REGION="eu-central"
            elif [ "$REGISTRY_REGION" == "uk" ]; then
              REGISTRY_REGION="uk-south"
            elif [ "$REGISTRY_REGION" == "us" ]; then
              REGISTRY_REGION="us-south"
            else
              echo "No IBM Cloud Container Registry region found for the registry url $REGISTRY_URL"
              exit 1
            fi
          fi

          # ibmcloud login
          ibmcloud config --check-version false
          ibmcloud login -a $(inputs.params.ibmcloudApi) -r $TOOLCHAIN_REGION --apikey $API_KEY
          if [ "$(inputs.params.resourceGroup)" ]; then
            ibmcloud target -g $(inputs.params.resourceGroup)
          fi

          # Log container registry to the appropriate region
          ibmcloud cr region-set $REGISTRY_REGION
          ibmcloud cr info

          # Create the namespace if needed to ensure the push will be can be successfull
          echo "Checking registry namespace: ${REGISTRY_NAMESPACE}"
          NS=$( ibmcloud cr namespaces | grep ${REGISTRY_NAMESPACE} ||: )
          if [ -z "${NS}" ]; then
              echo "Registry namespace ${REGISTRY_NAMESPACE} not found, creating it."
              ibmcloud cr namespace-add ${REGISTRY_NAMESPACE}
              echo "Registry namespace ${REGISTRY_NAMESPACE} created."
          else
              echo "Registry namespace ${REGISTRY_NAMESPACE} found."
          fi
          echo -e "Existing images in registry"
          ibmcloud cr images --restrict ${REGISTRY_NAMESPACE}

          # create a dry-run k8s secret of type docker-registry to obtain
          # the content of a docker config.json file to access the target
          # ibmcloud container registry
          kubectl create secret --dry-run=true --output=json \
            docker-registry registry-dockerconfig-secret \
            --docker-server=${REGISTRY_URL} \
            --docker-password=${API_KEY} \
            --docker-username=iamapikey --docker-email=a@b.com | \
          jq -r '.data[".dockerconfigjson"]' | base64 -d > config.json

          echo "REGISTRY_URL=${REGISTRY_URL}" > next-step-env.properties
          echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}" >> next-step-env.properties
          echo "REGISTRY_REGION=${REGISTRY_REGION}" >> next-step-env.properties
          echo "IMAGE_URL=${IMAGE_URL}" >> next-step-env.properties
          echo "IMAGE_TAG=${IMAGE_TAG}" >> next-step-env.properties
          echo "IMAGE_NAME=${IMAGE_NAME}" >> next-step-env.properties
      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /steps
          name: steps-volume
    - name: build-image
      image: $(inputs.params.custom-image)
      env:
        # Connect to the sidecar over TCP, with TLS.
        - name: DOCKER_HOST
          value: tcp://localhost:2376
        # Verify TLS.
        - name: DOCKER_TLS_VERIFY
          value: '1'
        # Use the certs generated by the sidecar daemon.
        - name: DOCKER_CERT_PATH
          value: /certs/client
      command: ["/bin/sh", "-c"]
      args:
        - |
          set -e -o pipefail
          cd /artifacts
          echo "Listing /artifacts directory:"
          ls -al

      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /certs/client
          name: dind-certs
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
    - name: dind-certs
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
        - key: toolchain.json
          path: toolchain.json
  sidecars:
    - image: docker:dind
      name: server
      securityContext:
        privileged: true
      env:
        # Write generated certs to the path shared with the client.
        - name: DOCKER_TLS_CERTDIR
          value: /certs
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs
      # Wait for the dind daemon to generate the certs it will share with the client.
      readinessProbe:
        periodSeconds: 1
        exec:
          command: ["ls", "/certs/client/ca.pem"]
