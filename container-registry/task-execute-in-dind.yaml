---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: icr-execute-in-dind
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: continuous-delivery-context-secret
      description: name of the secret containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: container-registry-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud container registry
      default: apikey
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: ""
    - name: registry-create-namespace
      description: create container registry namespace if it doesn't already exists
      default: "true"
    # Image related parameters
    - name: image-url
      description: "url of the image to build - required if no image pipeline resource provided to this task"
      default: ""
    - name: image-tag
      description: the default image tag if none is provided using the built-image url
      default: latest
    # Dockerfile location
    - name: path-to-context
      description: the path to the context that is used for the build (default to `.` meaning current directory)
      default: .
    - name: path-to-dockerfile
      description: the path to the Dockerfile that is used for the build (default to `.` meaning current directory)
      default: .
    - name: dockerfile
      description: The name of the Dockerfile
      default: "Dockerfile"
    # Docker Client configuration
    - name: docker-client-image
      description: The Docker image to use to run the Docker client
      default: docker
    # Docker commands
    - name: docker-commands
      description: The docker command(s) to run.
      default: |
        # Default docker build / inspect / push command
        docker build --tag "$IMAGE_URL:$IMAGE_TAG" --file $PATH_TO_DOCKERFILE/$DOCKERFILE $PATH_TO_CONTEXT
        docker inspect ${IMAGE_URL}:${IMAGE_TAG}
        docker push ${IMAGE_URL}:${IMAGE_TAG}
    #
    - name: properties-file
      description: file containing properties out of the docker in docker task
      default: build.properties
    - name: pipeline-debug
      description: Pipeline debug mode. Value can be 0 or 1. Default to 0
      default: "0"
    - name: registry-region
      description: container registry region id. required if no image-url or no image pipeline resources provided
      default: ""
    - name: registry-namespace
      description: container registry namespace. required if no image-url or no image pipeline resources provided
      default: ""
    - name: image-name
      description: image name. required if no image-url or no image pipeline resources provided
      default: ""
  results:
    - name: image-repository
      description: the repository for the built image
    - name: image-tags
      description: the tags for the built image
    - name: image-digest
      description: the image digest (sha-256 hash) for the built image
  workspaces:
    - name: source
      description: A workspace containing the source (Dockerfile, Docker context) to create the image
      mountPath: /artifacts
  resources:
    outputs:
      - name: built-image
        type: image
        description: "(Optional) The image to build"
        optional: true
  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)
  steps:
    - name: check-registry
      image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6
      workingDir: /steps
      env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.container-registry-apikey-secret-key)
        - name: IBMCLOUD_API
          value: $(params.ibmcloud-api)
        - name: IBMCLOUD_RESOURCE_GROUP
          value: $(params.resource-group)
        - name: REGISTRY_CREATE_NAMESPACE
          value: $(params.registry-create-namespace)
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          ##########################################################################
          # Setting HOME explicitly to have ibmcloud plugins available
          # doing the export rather than env definition is a workaround
          # until https://github.com/tektoncd/pipeline/issues/1836 is fixed
          export HOME="/root"
          ##########################################################################

          if [ "$(resources.outputs.built-image.url)" == "" ]; then
            export IMAGE_RESOURCE_URL="$(params.image-url)"
          else
            export IMAGE_RESOURCE_URL="$(resources.outputs.built-image.url)"
          fi

          if [ "$IMAGE_RESOURCE_URL" ]; then
            # Parse the image url to find registry information
            source /scripts/parse_image_url.sh
          else
            # export the expected environment variables based on the required registry parameters
            # if registry region is in the 'ibm:yp:<region>' just keep the region part
            export REGISTRY_REGION=$(echo "$(params.registry-region)" | awk -F ':' '{print $NF;}')
            if [ -z "$REGISTRY_REGION" ]; then
              echo "No registry region provided"
              exit 1
            fi
            export REGISTRY_NAMESPACE=$(params.registry-namespace)
            if [ -z "$REGISTRY_NAMESPACE" ]; then
              echo "No registry namespace provided"
              exit 1
            fi
          fi

          # Ensure login to the container registry and namespace available
          source /scripts/check_registry.sh

          if [ -z "$IMAGE_RESOURCE_URL" ]; then
            export IMAGE_NAME=$(params.image-name)
            if [ -z "$IMAGE_NAME" ]; then
              echo "No image name provided"
              exit 1
            fi
            # export the expected environment variables now that the container registry is logged in
            export REGISTRY_URL=$(ibmcloud cr info | grep -m1 -i '^Container Registry' | awk '{print $3;}')
            export IMAGE_URL="${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}"
          fi

          if [ -z "$IMAGE_TAG" ]; then
            # Use the image-tag provided as parameter
            export IMAGE_TAG=$(params.image-tag)
          fi

          # create a dry-run k8s secret of type docker-registry to obtain
          # the content of a docker config.json file to access the target
          # ibmcloud container registry
          echo "Creating a Kubernetes secret to access the IBM Cloud Container Registry."
          kubectl create secret --dry-run=true --output=json \
            docker-registry registry-dockerconfig-secret \
            --docker-server=${REGISTRY_URL} \
            --docker-password=${API_KEY} \
            --docker-username=iamapikey --docker-email=a@b.com | \
          jq -r '.data[".dockerconfigjson"]' | base64 -d > config.json

          echo ""
          echo "Secret created."

          echo "REGISTRY_URL=${REGISTRY_URL}" > next-step-env.properties
          echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}" >> next-step-env.properties
          echo "REGISTRY_REGION=${REGISTRY_REGION}" >> next-step-env.properties
          echo "IMAGE_URL=${IMAGE_URL}" >> next-step-env.properties
          echo "IMAGE_TAG=${IMAGE_TAG}" >> next-step-env.properties
          echo "IMAGE_NAME=${IMAGE_NAME}" >> next-step-env.properties

      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /steps
          name: steps-volume
        - mountPath: /scripts
          name: check-registry-scripts
    - name: run-docker-commands
      image: $(params.docker-client-image)
      workingDir: /artifacts
      env:
        - name: PROPERTIES_FILE
          value: $(params.properties-file)
        # variabled exposed to docker command
        - name: PATH_TO_CONTEXT
          value: $(params.path-to-context)
        - name: PATH_TO_DOCKERFILE
          value: $(params.path-to-dockerfile)
        - name: DOCKERFILE
          value: $(params.dockerfile)
        # Docker client configuration
        # Connect to the sidecar over TCP, with TLS.
        - name: DOCKER_HOST
          value: "tcp://localhost:2376"
        # Verify TLS.
        - name: DOCKER_TLS_VERIFY
          value: "1"
        # Use the certs generated by the sidecar daemon.
        - name: DOCKER_CERT_PATH
          value: /certs/client
        # The location of the client configuration files.
        - name: DOCKER_CONFIG
          value: /steps
        # CD execution context injection
        - name: PIPELINE_RUN_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']
        - name: PIPELINE_RUN_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
        - name: PIPELINE_RUN_URL
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: PIPELINE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
        - name: TRIGGER_TYPE
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-type']
        - name: TRIGGER_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-name']
        - name: TRIGGERED_BY
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/triggered-by']
      command: ["/bin/sh", "-c"]
      args:
        - |
          set -e -o pipefail

          if [ $PIPELINE_DEBUG == 1 ]; then
              pwd
              env
              trap env EXIT
              set -x
          fi

          # if [ "$(resources.outputs.built-image.url)" == "" ]; then
          #           export IMAGE_RESOURCE_URL="$(params.image-url)"
          #          else
          #            export IMAGE_RESOURCE_URL="$(resources.outputs.built-image.url)"
          #          fi

          #           # Parse the image url to find information (region, namespace, image name and eventually tag)
          #            # as url of Image PipelineResource is the complete path to the image, including the registry
          #            # and the image tag - https://github.com/tektoncd/pipeline/blob/v0.10.1/docs/resources.md#image-resource
          #            IMAGE_URL=$(echo $IMAGE_RESOURCE_URL |  awk -F: '{print $1}')
          #            IMAGE_TAG=$(echo $IMAGE_RESOURCE_URL |  awk -F: '{print $2}')
          #            if [ -z "$IMAGE_TAG" ]; then
          #              IMAGE_TAG="$(params.image-tag)"
          #            fi

          source /steps/next-step-env.properties
          export $(cut -d= -f1 /steps/next-step-env.properties)

          echo "Image URL: $IMAGE_URL"
          echo "Image tag: $IMAGE_TAG"
          echo ""

          # run docker command(s) passed as parameter
          echo "Running docker command(s)..."
          echo ""

          $(params.docker-commands)

          echo ""
          # Persist registry and image information in an output properties file
          # REGISTRY_URL=$(echo $IMAGE_RESOURCE_URL |  awk -F/ '{print $1}')
          # REGISTRY_NAMESPACE=$(echo $IMAGE_RESOURCE_URL |  awk -F/ '{print $2}')
          # Image name is remaining part after the repository and namespace and can contains /
          # IMAGE_NAME=$(echo $IMAGE_URL |  awk -F/ '{a=match($0, $3); print substr($0,a)}')

          MANIFEST_SHA=$(docker inspect "$IMAGE_URL:$IMAGE_TAG" \
            --format='{{index .RepoDigests 0 }}' | awk -F@ '{print $2}')

          if [ "$PROPERTIES_FILE" ]; then
            # Ensure directory is there
            mkdir -p $(workspaces.source.path)/$(dirname "$PROPERTIES_FILE")
            echo "REGISTRY_URL=${REGISTRY_URL}" >> $(workspaces.source.path)/$PROPERTIES_FILE
            echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}" >> $(workspaces.source.path)/$PROPERTIES_FILE
            echo "IMAGE_NAME=${IMAGE_NAME}" >> $(workspaces.source.path)/$PROPERTIES_FILE
            echo "IMAGE_TAGS=${IMAGE_TAG}" >> $(workspaces.source.path)/$PROPERTIES_FILE
            echo "IMAGE_MANIFEST_SHA=${MANIFEST_SHA}" >> $(workspaces.source.path)/$PROPERTIES_FILE
            echo "$PROPERTIES_FILE content:"
            cat $(workspaces.source.path)/$PROPERTIES_FILE
            echo ""
          fi

          # Record task results
          echo -n "${IMAGE_URL}" > $(results.image-repository.path)
          echo -n "${IMAGE_TAG}" > $(results.image-tags.path)
          echo -n "${MANIFEST_SHA}" > $(results.image-digest.path)

          echo "Done."
      volumeMounts:
        - mountPath: /steps
          name: steps-volume
        - mountPath: /certs/client
          name: dind-certs
        - name: cd-config-volume
          mountPath: /cd-config          
        - name: environment-properties
          mountPath: /cd-config/environment-properties
        - name: secure-properties
          mountPath: /cd-config/secure-properties
  sidecars:
    - image: icr.io/continuous-delivery/pipeline/docker:19.03.15-dind
      name: server
      securityContext:
        privileged: true
      command: ["sh", "-c"]
      env:
        # Write generated certs to the path shared with the client.
        - name: DOCKER_TLS_CERTDIR
          value: /certs
      args:
        # Set the MTU to a value that is containable in the ibmcloud calico mtu value
        # References:
        # - https://liejuntao001.medium.com/fix-docker-in-docker-network-issue-in-kubernetes-cc18c229d9e5
        # - https://cloud.ibm.com/docs/containers?topic=containers-kernel#calico-mtu
        #
        # Use a workaround to by pass virtio-fs for Continuous Delivery shared workers
        - if [[ $(df -PT /var/lib/docker | awk 'NR==2 {print $2}') == virtiofs ]]; then
            apk add e2fsprogs &&
            truncate -s 20G /tmp/disk.img &&
            mkfs.ext4 /tmp/disk.img &&
            mount /tmp/disk.img /var/lib/docker; fi &&
          dockerd-entrypoint.sh --mtu=1400;
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs
      # Wait for the dind daemon to generate the certs it will share with the client.
      readinessProbe:
        initialDelaySeconds: 2
        periodSeconds: 1
        exec:
          command: ["ls", "/certs/client/ca.pem"]
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: dind-certs
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
    - name: check-registry-scripts
      configMap:
        name: check-registry-scripts
        items:
          - key: check_registry.sh
            path: check_registry.sh
          - key: parse_image_url.sh
            path: parse_image_url.sh
    - name: environment-properties
      configMap:
        name: environment-properties
    - name: secure-properties
      secret:
        secretName: secure-properties
