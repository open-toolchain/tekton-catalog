apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: task-dind
spec:
  inputs:
    params:
      - name: task-pvc
        description: the output pvc
      # Dockerfile location
      - name: pathToDockerfile
        description: the path to the Docker file
        default: /
      - name: dockerfile
        description: The name of the Dockerfile to build from
        default: "Dockerfile"
      # IBM Cloud Container Registry configuration
      - name: registryUrl
        description: the Container Registry URL
        default: us.icr.io        
      - name: registryNameSpace
        description: the Container Registry NameSpace
      - name: imageName
        description: the image name
      - name: imageTag
        description: the image tag
        default: latest
      - name: continuous-delivery-context-secret
        description: name of the configmap containing the continuous delivery pipeline context secrets
        default: cd-secret
      # Docker Client configuration
      - name: dockerClientImage
        description: The Docker image to use to run the Docker client
        default: docker
  steps:
    - name: create-secret
      image: ibmcom/pipeline-base-image
      workingDir: /steps
      env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(inputs.params.continuous-delivery-context-secret)
              key: API_KEY
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail 
          # create a dry-run k8s secret of type docker-registry to obtain
          # the content of a docker config.json file to access the target
          # ibmcloud container registry
          echo "Creating a Kubernetes secret to access the IBM Cloud Container Registry."
          kubectl create secret --dry-run=true --output=json \
            docker-registry registry-dockerconfig-secret \
            --docker-server=$(inputs.params.registryUrl) \
            --docker-password=${API_KEY} \
            --docker-username=iamapikey --docker-email=a@b.com | \
          jq -r '.data[".dockerconfigjson"]' | base64 -d > config.json
          echo "Secret created."
      volumeMounts:
        - mountPath: /steps
          name: steps-volume
    - name: build-and-push-image
      image: $(inputs.params.dockerClientImage)
      env:
        # IBM Cloud Container Registry configuration
        - name: REGISTRY_URL
          value: $(inputs.params.registryUrl)
        - name: REGISTRY_NAMESPACE
          value: $(inputs.params.registryNameSpace)
        - name: IMAGE_NAME
          value: $(inputs.params.imageName)
        - name: IMAGE_TAG
          value: $(inputs.params.imageTag)
        # Docker client configuration
        # Connect to the sidecar over TCP, with TLS.
        - name: DOCKER_HOST
          value: tcp://localhost:2376
        # Verify TLS.
        - name: DOCKER_TLS_VERIFY
          value: '1'
        # Use the certs generated by the sidecar daemon.
        - name: DOCKER_CERT_PATH
          value: /certs/client
        # The location of the client configuration files.
        - name: DOCKER_CONFIG
          value: /steps
      command: ["/bin/sh", "-c"]
      args:
        - |
          set -e -o pipefail
          echo "Building Docker image..."
          echo "docker build --tag $REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:$IMAGE_TAG --file /artifacts$(inputs.params.pathToDockerfile)$(inputs.params.dockerfile) /artifacts$(inputs.params.pathToDockerfile)"
          docker build --tag "$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:$IMAGE_TAG" --file /artifacts$(inputs.params.pathToDockerfile)$(inputs.params.dockerfile) /artifacts$(inputs.params.pathToDockerfile)
          echo ""
          echo "#######################"

          echo "Inpecting Docker image..."
          echo "docker inspect ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG}"
          docker inspect ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG}
          echo ""
          echo "#######################"

          echo "Pushing Docker image $REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:$IMAGE_TAG to the IBM Cloud Container Registry"
          echo "docker push "$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:$IMAGE_TAG""
          docker push "$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:$IMAGE_TAG" 
          echo ""
          echo "Done."
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /steps
          name: steps-volume
        - mountPath: /certs/client
          name: dind-certs
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
    - name: steps-volume
      emptyDir: {}
    - name: dind-certs
      emptyDir: {}
  sidecars:
    - image: docker:dind
      name: server
      securityContext:
        privileged: true
      env:
        # Write generated certs to the path shared with the client.
        - name: DOCKER_TLS_CERTDIR
          value: /certs
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs
      # Wait for the dind daemon to generate the certs it will share with the client.
      readinessProbe:
        periodSeconds: 1
        exec:
          command: ["ls", "/certs/client/ca.pem"]
