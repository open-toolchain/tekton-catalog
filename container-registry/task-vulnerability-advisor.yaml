apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: vulnerability-advisor-task
spec:
  inputs:
    params:
      - name: task-pvc
        description: the task pvc - this is the volume where the files (Dockerfile etc..) are expected to be
      - name: continuous-delivery-context-configmap
        description: name of the configmap containing the continuous delivery pipeline context
        default: cd-config
      - name: continuous-delivery-context-secret
        description: name of the configmap containing the continuous delivery pipeline context secrets
        default: cd-secret
      - name: imagePropertiesFile
        description: file containing properties of the image to be scanned
        default: 'build.properties'
      - name: maxIteration
        description: maximum number of iterations allowed while loop to check for va report
        default: '30'
      - name: sleepTime
        description: sleep time (in seconds) between invocation of ibmcloud cr va in the loop
        default: '10'
      - name: scanReportFile
        description: filename for the scan report (json format) of the given image. It will be copied in the task-pvc
        default: ''
      - name: failOnScannedIssues
        description: flag (`true` | `false`) to indicate if the task should fail or continue if issues are found in the image scan result
        default: 'true'
    resources:
      - name: image
        type: image
  steps:
    - name: run-vulnerability-advisor-scan
      image: ibmcom/pipeline-base-image
      workingDir: /artifacts
      env:
        - name: API
          valueFrom:
            configMapKeyRef:
              name: $(inputs.params.continuous-delivery-context-configmap)
              key: API
        - name: REGION
          valueFrom:
            configMapKeyRef:
              name: $(inputs.params.continuous-delivery-context-configmap)
              key: REGION
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(inputs.params.continuous-delivery-context-secret)
              key: API_KEY
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail

          ##########################################################################
          # Setting HOME explicitly to have ibmcloud plugins available
          # doing the export rather than env definition is a workaround
          # until https://github.com/tektoncd/pipeline/issues/1836 is fixed
          export HOME="/root"
          ##########################################################################
          # Parse the image input to find information (region, namespace, image name, tag & digest/sha)
          INPUT_IMAGE_URL=$(echo $(inputs.resources.image.url) |  awk -F: '{print $1}')
          INPUT_REGISTRY_URL=$(echo $(inputs.resources.image.url) |  awk -F/ '{print $1}')
          INPUT_REGISTRY_NAMESPACE=$(echo $(inputs.resources.image.url) |  awk -F/ '{print $2}')
          INPUT_IMAGE_NAME=$(echo $(inputs.resources.image.url) |  awk -F/ '{print $3}')
          INPUT_IMAGE_TAG=$(echo $(inputs.resources.image.url) |  awk -F: '{print $2}')
          INPUT_IMAGE_DIGEST=$(inputs.resources.image.digest)

          # Find the ibmcloud container registry region
          # https://cloud.ibm.com/docs/services/Registry?topic=registry-registry_overview#registry_regions_local
          if [[ $INPUT_REGISTRY_URL =~ ^registry\.[a-z]*.bluemix.net$ ]]; then
            # deprecated domain name
            REGISTRY_REGION=$(echo $INPUT_REGISTRY_URL | awk -F. '{print $2}')
            if [ "$REGISTRY_REGION" == "ng" ]; then
              REGISTRY_REGION="us-south"
            fi
          else
            export REGISTRY_REGION=$(echo $INPUT_REGISTRY_URL | awk -F. '{print $1}')
            if [ "$REGISTRY_REGION" == "jp" ]; then
              REGISTRY_REGION="ap-north"
            elif [ "$REGISTRY_REGION" == "au" ]; then
              REGISTRY_REGION="ap-south"
            elif [ "$REGISTRY_REGION" == "de" ]; then
              REGISTRY_REGION="eu-central"
            elif [ "$REGISTRY_REGION" == "uk" ]; then
              REGISTRY_REGION="uk-south"
            elif [ "$REGISTRY_REGION" == "us" ]; then
              REGISTRY_REGION="us-south"
            else
              echo "No IBM Cloud Container Registry region found for the registry url $INPUT_REGISTRY_URL"
              exit 1
            fi
          fi

          # ibmcloud login
          ibmcloud config --check-version false
          ibmcloud login -a $API -r $REGION --apikey $API_KEY

          # Log container registry to the appropriate region
          ibmcloud cr region-set $REGISTRY_REGION

          # Because of https://github.com/tektoncd/pipeline/issues/216 the image digest for input is probably empty
          # If image digest is empty, then use the imageProperties file to obtain the information
          if [ -z "$INPUT_IMAGE_DIGEST" ]; then
            if [ -z "$(inputs.params.imagePropertiesFile)" ]; then
              echo "No digest found - use only the image url"
              PIPELINE_IMAGE_URL="$INPUT_IMAGE_URL"
            else
              # Look for the digest in the imagePropertiesFile
              source $(inputs.params.imagePropertiesFile)
              PIPELINE_IMAGE_URL="$INPUT_IMAGE_URL@$IMAGE_MANIFEST_SHA"
            fi
          else
            PIPELINE_IMAGE_URL="$INPUT_IMAGE_URL@$INPUT_IMAGE_DIGEST"
          fi

          # inspect the image to ensure it exists
          echo -e "Details for image: ${PIPELINE_IMAGE_URL}"
          ibmcloud cr image-inspect ${PIPELINE_IMAGE_URL}

          # Loop until the scan has been performed
          echo -e "Checking vulnerabilities in image: ${PIPELINE_IMAGE_URL}"
          for ITER in {1..$(inputs.params.maxIteration)}
          do
            set +e
            VA_OUPUT=$(ibmcloud cr va -e -o json ${PIPELINE_IMAGE_URL})
            # ibmcloud cr va returns a non valid json output if image not yet scanned
            if echo $VA_OUPUT | jq -r '.' > /dev/null 2>&1; then
              STATUS=$( echo $VA_OUPUT | jq -r '.[0].status' )
            else
              echo "$VA_OUPUT"
              STATUS="UNSCANNED"
            fi
            set -e
            # Possible status from Vulnerability Advisor: OK, UNSUPPORTED, INCOMPLETE, UNSCANNED, FAIL, WARN
            if [[ "${STATUS}" != "INCOMPLETE" && "${STATUS}" != "UNSCANNED" ]]; then
              break
            fi
            echo -e "${ITER} STATUS ${STATUS} : A vulnerability report was not found for the specified image."
            echo "Either the image doesn't exist or the scan hasn't completed yet. "
            echo "Waiting $(inputs.params.sleepTime)s for scan to complete..."
            sleep $(inputs.params.sleepTime)
          done
          set +e
          ibmcloud cr va -e ${PIPELINE_IMAGE_URL}
          set -e
          ibmcloud cr va -e -o json ${PIPELINE_IMAGE_URL} > /steps/vareport.json
          STATUS=$( jq -r '.[0].status' /steps/vareport.json )
          if [ "$(inputs.params.scanReportFile)" ]; then
            echo "Copy Vulnerability Advisor scan report (JSON format) to /artifacts/$(inputs.params.scanReportFile)"
            cp /steps/vareport.json /artifacts/$(inputs.params.scanReportFile)
          fi
          if [[ "${STATUS}" == "OK" ]] || [[ "${STATUS}" == "UNSUPPORTED" ]] || [[ "${STATUS}" == "WARN" ]]; then
            echo "The vulnerability scan status is ${STATUS}"
          else
            echo "ERROR: The vulnerability scan was not successful (status being ${STATUS}), check the OUTPUT of the command and try again."
            if [ "$(inputs.params.failOnScannedIssues)" == "true" ]; then
              exit 1;
            fi
          fi
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /steps
          name: steps-volume
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
    - name: steps-volume
      emptyDir: {}
