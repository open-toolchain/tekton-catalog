apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: icr-check-va-scan
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: continuous-delivery-context-secret
      description: name of the configmap containing the continuous delivery pipeline context secrets
      default: cd-secret
    - name: container-registry-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud container registry
      default: 'API_KEY'
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: ''
    - name: image-url
      description: "url of the image to VA scan - required if no image pipeline resource provided to this task"
      default: ""
    - name: image-digest
      description: "SHA id of the image to VA scan - required if no image pipeline resource provided to this task"
      default: ""
    - name: image-properties-file
      description: file containing properties of the image to be scanned
      default: 'build.properties'
    - name: max-iteration
      description: maximum number of iterations allowed while loop to check for va report
      default: '30'
    - name: sleep-time
      description: sleep time (in seconds) between invocation of ibmcloud cr va in the loop
      default: '10'
    - name: scan-report-file
      description: filename for the scan report (json format) of the given image. It will be copied in the workspace
      default: ''
    - name: fail-on-scanned-issues
      description: flag (`true` | `false`) to indicate if the task should fail or continue if issues are found in the image scan result
      default: 'true'
    - name: pipeline-debug
      default: "0"
  results:
    - name: scan-report-file
      description: the filename if the scan report for the image stored in the workspace
    - name: scan-status
      description: |
        the status from Vulnerability Advisor - possible values: OK, WARN, FAIL, UNSUPPORTED, INCOMPLETE, UNSCANNED
  workspaces:
    - name: workspace
      description: A workspace backing by a volume where the report will be stored
      mountPath: /artifacts
  resources:
    inputs:
      - name: image
        type: image
        description: "(Optional) The image that has to be VA scanned"
        optional: true
  steps:
    - name: run-vulnerability-advisor-scan
      image: ibmcom/pipeline-base-image:2.6
      workingDir: /artifacts
      env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.container-registry-apikey-secret-key)
        - name: PIPELINE_DEBUG
          value: $(params.pipeline-debug)            
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail

          if [ $PIPELINE_DEBUG == 1 ]; then
              pwd
              env
              trap env EXIT
              set -x
          fi

          TOOLCHAIN_ID=$(jq -r '.toolchain_guid' /cd-config/toolchain.json)
          TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json | awk -F: '{print $3}')
          ##########################################################################
          # Setting HOME explicitly to have ibmcloud plugins available
          # doing the export rather than env definition is a workaround
          # until https://github.com/tektoncd/pipeline/issues/1836 is fixed
          export HOME="/root"
          ##########################################################################

          if [ "$(resources.inputs.image.url)" == "" ]; then
            INPUT_IMAGE_URL=$(echo "$(params.image-url)" |  awk -F: '{print $1}')
          else
            INPUT_IMAGE_URL=$(echo "$(resources.inputs.image.url)" |  awk -F: '{print $1}')
          fi

          # Parse the image input to find information (region, namespace, image name, tag & digest/sha)
          INPUT_REGISTRY_URL=$(echo $INPUT_IMAGE_URL |  awk -F/ '{print $1}')
          INPUT_REGISTRY_NAMESPACE=$(echo $INPUT_IMAGE_URL |  awk -F/ '{print $2}')
          INPUT_IMAGE_NAME=$(echo $INPUT_IMAGE_URL |  awk -F/ '{print $3}')
          INPUT_IMAGE_TAG=$(echo $INPUT_IMAGE_URL |  awk -F: '{print $2}')

          if [ "$(resources.inputs.image.digest)" == "" ]; then
            INPUT_IMAGE_DIGEST=$(params.image-digest)
          else
            INPUT_IMAGE_DIGEST=$(resources.inputs.image.digest)
          fi

          # Find the ibmcloud container registry region
          # https://cloud.ibm.com/docs/services/Registry?topic=registry-registry_overview#registry_regions_local
          if [[ $INPUT_REGISTRY_URL =~ ^registry\.[a-z]*.bluemix.net$ ]]; then
            # deprecated domain name
            REGISTRY_REGION=$(echo $INPUT_REGISTRY_URL | awk -F. '{print $2}')
            if [ "$REGISTRY_REGION" == "ng" ]; then
              REGISTRY_REGION="us-south"
            fi
          else
            export REGISTRY_REGION=$(echo $INPUT_REGISTRY_URL | awk -F. '{print $1}')
            if [ "$REGISTRY_REGION" == "jp" ]; then
              REGISTRY_REGION="ap-north"
            elif [ "$REGISTRY_REGION" == "au" ]; then
              REGISTRY_REGION="ap-south"
            elif [ "$REGISTRY_REGION" == "de" ]; then
              REGISTRY_REGION="eu-central"
            elif [ "$REGISTRY_REGION" == "uk" ]; then
              REGISTRY_REGION="uk-south"
            elif [ "$REGISTRY_REGION" == "us" ]; then
              REGISTRY_REGION="us-south"
            elif [ "$REGISTRY_REGION" == "stg" ]; then
              REGISTRY_REGION="us-south"
            else
              echo "No IBM Cloud Container Registry region found for the registry url $INPUT_REGISTRY_URL"
              exit 1
            fi
          fi

          # ibmcloud login
          ibmcloud config --check-version false
          ibmcloud login -a $(params.ibmcloud-api) -r $TOOLCHAIN_REGION --apikey $API_KEY
          if [ "$(params.resource-group)" ]; then
            ibmcloud target -g $(params.resource-group)
          fi

          # Log container registry to the appropriate region
          ibmcloud cr region-set $REGISTRY_REGION
          ibmcloud cr info

          # Because of https://github.com/tektoncd/pipeline/issues/216 the image digest for input is probably empty
          # If image digest is empty, then use the imageProperties file to obtain the information
          if [ -z "$INPUT_IMAGE_DIGEST" ]; then
            if [ -z "$(params.image-properties-file)" ]; then
              echo "No digest found - use only the image url"
              PIPELINE_IMAGE_URL="$INPUT_IMAGE_URL"
            else
              # Look for the digest in the image-properties-file
              echo "Search for digest in the $(params.image-properties-file)"
              source $(params.image-properties-file)
              PIPELINE_IMAGE_URL="$INPUT_IMAGE_URL@$IMAGE_MANIFEST_SHA"
            fi
          else
            PIPELINE_IMAGE_URL="$INPUT_IMAGE_URL@$INPUT_IMAGE_DIGEST"
          fi

          # inspect the image to ensure it exists
          echo -e "Details for image: ${PIPELINE_IMAGE_URL}"
          ibmcloud cr image-inspect ${PIPELINE_IMAGE_URL}

          # Loop until the scan has been performed
          echo -e "Checking vulnerabilities in image: ${PIPELINE_IMAGE_URL}"
          for ITER in {1..$(params.max-iteration)}
          do
            set +e
            STATUS=""
            ibmcloud cr va -o json ${PIPELINE_IMAGE_URL} > /steps/vareport.json
            # ibmcloud cr va returns a non valid json output if image not yet scanned
            if jq -r -e '.[0].status' /steps/vareport.json > /dev/null 2>&1; then
              STATUS=$( jq -r '.[0].status' /steps/vareport.json)
            fi
            if [ -z "$STATUS" ]; then
              STATUS="UNSCANNED"
              cat /steps/vareport.json
            fi
            set -e
            echo "VA scan status is ${STATUS}"
            # Possible status from Vulnerability Advisor: OK, WARN, FAIL, UNSUPPORTED, INCOMPLETE, UNSCANNED
            # cf https://cloud.ibm.com/apidocs/container-registry/va#get-the-vulnerability-assessment-for-the-list-of-r            
            if [[ "${STATUS}" != "INCOMPLETE" && "${STATUS}" != "UNSCANNED" ]]; then
              # status is one of the terminated scan action - break the loop
              break
            fi
            echo -e "${ITER} STATUS ${STATUS} : A vulnerability report was not found for the specified image."
            echo "Either the image doesn't exist or the scan hasn't completed yet. "
            echo "Waiting $(params.sleep-time)s for scan to complete..."
            sleep $(params.sleep-time)
          done
          set +e
          echo "Showing extended vulnerability assessment report for ${PIPELINE_IMAGE_URL}"
          ibmcloud cr va -e ${PIPELINE_IMAGE_URL} || true
          set -e
          if [ "$(params.scan-report-file)" ]; then
            echo "Copy Vulnerability Advisor scan report (JSON format) to $(workspaces.workspace.path)/$(params.scan-report-file)"
            cp /steps/vareport.json $(workspaces.workspace.path)/$(params.scan-report-file)
          fi

          # Record task results
          echo -n "$(params.scan-report-file)" > $(results.scan-report-file.path)
          echo -n "${STATUS}" > $(results.scan-status.path)

          if [[ "${STATUS}" == "OK" ]] || [[ "${STATUS}" == "UNSUPPORTED" ]] || [[ "${STATUS}" == "WARN" ]]; then
            echo "The vulnerability scan status is ${STATUS}"
          else
            echo "ERROR: The vulnerability scan was not successful (status being ${STATUS}), check the OUTPUT of the command and try again."
            if [ "$(params.fail-on-scanned-issues)" == "true" ]; then
              exit 1;
            fi
          fi
      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /steps
          name: steps-volume
  volumes:
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
        - key: toolchain.json
          path: toolchain.json
    - name: steps-volume
      emptyDir: {}
