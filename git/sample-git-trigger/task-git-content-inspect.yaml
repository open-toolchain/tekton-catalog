apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: inspect-content-task
spec:
  inputs:
    params:
      - name: task-pvc
        description: the output pvc - this is where the cloned repository will be stored
      - name: repository
        description: the git repo url
      - name: directoryName
        default: '.'
      - name: propertiesFile
        default: build.properties
      - name: gitCredentialsJsonFile
        default: ''
  steps:
    - name: inspect-git-content
      image: alpine/git
      env:
        - name: REPOSITORY
          value: $(inputs.params.repository)
        - name: DIRECTORY_NAME
          value: $(inputs.params.directoryName)
      command: ["/bin/sh", "-c"]
      args:
        - |
          # cd in the directory of the previous git operations
          cd /artifacts
          if [ -z "$DIRECTORY_NAME" ]; then
            # Find the "humanish" part of the git source repository that corresponds to the clone directory
            # GIT_REPOSITORY contains the repository url with .git suffix
            DIRECTORY_NAME=$(basename "${GIT_REPOSITORY##*/}" .git)
          fi
          # show the git content
          echo "Executing 'git show-branch --all'"
          git show-branch --all
          echo ""
          echo "##############"
          # show the directory content as a tree
          apk update && apk add tree
          echo "##############"
          echo "Executing 'tree'"
          tree
          echo ""
          # show the README.md content
          echo "##############"
          echo "Executing 'cat README.md'"
          cat README.md
          echo ""
          echo "Executing 'cat $(inputs.params.propertiesFile)'"
          cat $(inputs.params.propertiesFile)
          echo ""
          if [ "$(inputs.params.gitCredentialsJsonFile)" ]; then
            echo "Executing 'cat $(inputs.params.gitCredentialsJsonFile)'"
            cat $(inputs.params.gitCredentialsJsonFile)
          fi
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume      
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
