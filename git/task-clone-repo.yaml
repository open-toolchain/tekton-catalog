apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: clone-repo-task
spec:
  inputs:
    params:
      - name: task-pvc
        description: the output pvc - this is where the cloned repository will be stored
      - name: ibmcloudApi
        description: the ibmcloud api
        default: https://cloud.ibm.com
      - name: continuous-delivery-context-secret
        description: name of the configmap containing the continuous delivery pipeline context secrets
        default: cd-secret
      - name: gitAccessToken
        description: |
          (optional) token to access the git repository. If this token is provided, there will not be an attempt
          to use the git token obtained from the authorization flow when adding the git integration in the toolchain 
        default: ''
      - name: resourceGroup
        description: target resource group (name or id) for the ibmcloud login operation
        default: ''
      - name: repository
        description: the git repo url
      - name: branch
        description: the git branch
        default: master
      - name: revision
        description: |
          the git revision/commit to update the git HEAD to.
          Default is to mean only use the branch
        default: ""
      - name: pr_branch
        description: |
          origin reference to merge the code with in order to offer a merge
          Like https://docs.cloudbees.com/docs/admin-resources/latest/plugins/github-branch-source#_controlling_what_is_built
        default: ""
      - name: pr_revision
        default: ""
      - name: directoryName
        description: |
          name of the new directory to clone into.
          Default to . in order to clone at the root of the volume mounted for the pipeline run
          It will be to the "humanish" part of the repository if this param is set to blank
        default: "."
      - name: propertiesFile
        description: file containing properties out of clone task
        default: build.properties
  stepTemplate:
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(inputs.params.continuous-delivery-context-secret)
            key: API_KEY
            optional: true
  steps:
    - name: fetch-git-token
      image: ibmcom/pipeline-base-image
      env:
        - name: REPOSITORY
          value: $(inputs.params.repository)
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          TOOLCHAIN_ID=$(jq -r '.toolchain_guid' /cd-config/toolchain.json)
          TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json | awk -F: '{print $3}')
          ##########################################################################
          # Setting HOME explicitly to have ibmcloud plugins available
          # doing the export rather than env definition is a workaround
          # until https://github.com/tektoncd/pipeline/issues/1836 is fixed
          export HOME="/root"
          ##########################################################################
          if [[ "$REPOSITORY" != *.git ]]; then
            echo "Adding .git suffix to Repository URL"
            REPOSITORY="${REPOSITORY}.git"
          fi
          GIT_SERVICE_INSTANCE_ID=$(jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .instance_id' /cd-config/toolchain.json)
          if [ -z "$GIT_SERVICE_INSTANCE_ID" ]; then
            echo "No Git integration (repository url: $REPOSITORY) found in the toolchain"
            exit 1
          fi
          GIT_SERVICE_TYPE=$(jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .service_id' /cd-config/toolchain.json)

          if [ "$GIT_SERVICE_TYPE" == "github" ]; then
            GIT_AUTH_USER="x-oauth-basic"
          elif [ "$GIT_SERVICE_TYPE" == "githubpublic" ]; then
            GIT_AUTH_USER="x-oauth-basic"
          elif [ "$GIT_SERVICE_TYPE" == "hostedgit" ]; then
            GIT_AUTH_USER="oauth2"
          elif [ "$GIT_SERVICE_TYPE" == "gitlab" ]; then
            GIT_AUTH_USER="oauth2"
          elif [ "$GIT_SERVICE_TYPE" == "bitbucketgit" ]; then
            GIT_AUTH_USER="x-token-auth"
          else
            GIT_AUTH_USER="x-token-auth"
          fi;

          GIT_TOKEN="$(inputs.params.gitAccessToken)"
          if [ -z "$GIT_TOKEN" ]; then
            echo "Fetching token for $REPOSITORY"
            ibmcloud config --check-version false
            ibmcloud login -a $(inputs.params.ibmcloudApi) -r $TOOLCHAIN_REGION --apikey $API_KEY
            if [ "$(inputs.params.resourceGroup)" ]; then
              ibmcloud target -g $(inputs.params.resourceGroup)
            fi
            TOKEN=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token')
            GIT_TOKEN_URL=$(jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .parameters.token_url' /cd-config/toolchain.json)

            echo "Doing cURL to ${GIT_TOKEN_URL}?toolchain_id=${TOOLCHAIN_ID}&service_instance_id=${GIT_SERVICE_INSTANCE_ID}&repo_url=${REPOSITORY}"

            curl -s -o /steps/github_token_result.json -X GET -H "Accept: application/json" -H "Authorization: $TOKEN" "${GIT_TOKEN_URL}?toolchain_id=${TOOLCHAIN_ID}&service_instance_id=${GIT_SERVICE_INSTANCE_ID}&repo_url=${REPOSITORY}"
            if jq -e '.access_token' /steps/github_token_result.json > /dev/null 2>&1; then
              GIT_TOKEN=$(jq -r '.access_token' /steps/github_token_result.json)
              echo "Access token found for the Git integration (repository url: $REPOSITORY)"
            else
              echo "No access token found for the Git integration (repository url: $REPOSITORY)"
              cat /steps/github_token_result.json
              exit 1
            fi
          else
            echo "Using git Access Token provided"
          fi

          echo "GIT_REPOSITORY=$REPOSITORY" > /steps/next-step-env.properties
          echo "GIT_AUTH_USER=$GIT_AUTH_USER" >> /steps/next-step-env.properties
          echo "GIT_TOKEN=$GIT_TOKEN" >> /steps/next-step-env.properties
      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /steps
          name: steps-volume
    - name: clone-repo
      image: alpine/git
      env:
        - name: REPOSITORY
          value: $(inputs.params.repository)
        - name: BRANCH
          value: $(inputs.params.branch)
        - name: REVISION
          value: $(inputs.params.revision)
        - name: PR_BRANCH
          value: $(inputs.params.pr_branch)          
        - name: PR_REVISION
          value: $(inputs.params.pr_revision)          
        - name: DIRECTORY_NAME
          value: $(inputs.params.directoryName)
        - name: PROPERTIES_FILE
          value: $(inputs.params.propertiesFile)
      command: ["/bin/sh", "-c"]
      args:
        - |

          ############################
          # Workaround until a null/empty param can be flowing to Task
          # REVISION if not set is define with a single blank value
          REVISION=$(echo $REVISION)
          ############################
          source /steps/next-step-env.properties

          echo "######################"
          env | sort
          echo "######################"

          echo "Cloning $REPOSITORY"
          # Add the proper creds to the git repository
          GIT_URL=$(echo "$REPOSITORY" | sed -e "s/:\/\//:\/\/$GIT_AUTH_USER:$GIT_TOKEN@/g")
          cd /artifacts
          if [ "$REVISION" ]; then
            # check if the branch exists (that may not be the case in case of a pipeline-run re-run)
            echo "Fetching specific -${REVISION}- commit"
            if [ -z "$BRANCH" ]; then
              # No branch provided
              git clone -q -n $GIT_URL $DIRECTORY_NAME
            elif git ls-remote --heads --exit-code $GIT_URL $BRANCH > /dev/null 2>&1; then
              git clone -q -b $BRANCH $GIT_URL $DIRECTORY_NAME
            else
              echo "branch $BRANCH does not exists in $REPOSITORY"
              git clone -q -n $GIT_URL $DIRECTORY_NAME
            fi
          else
            git clone -q -b $BRANCH $GIT_URL $DIRECTORY_NAME
          fi
          current_dir=$(pwd)
          if [ -z "$DIRECTORY_NAME" ]; then
            # Find the "humanish" part of the git source repository that corresponds to the clone directory
            # GIT_REPOSITORY contains the repository url with .git suffix
            DIRECTORY_NAME=$(basename "${GIT_REPOSITORY##*/}" .git)
          fi
          cd $DIRECTORY_NAME
          if [ "$REVISION" ]; then
            # Point the HEAD to the specific revision
            git checkout -q $REVISION
          fi
          GIT_COMMIT=$(git show-ref --head | head -n1 | awk '{print $1}')

          if [ ! -z "${PR_BRANCH}" ]; then
            # Fetch the origin reference to the update code (PR)
            echo "Performing Pull Request Checkout/Merge"
            git config --global user.email "cdtektonpipeline@ibm.com"
            git config --global user.name "CD Tekton Pipeline"            
            echo "Fetch PR Branch ${PR_BRANCH}"
            git fetch origin "${PR_BRANCH}"
            if [ ! -z "${PR_REVISION}" ]; then
              #git checkout "${PR_REVISION}"
              git merge "${PR_REVISION}"
              # Keep the GIT_COMMIT information to an existing git commit
              GIT_COMMIT=${PR_REVISION}
            else 
              git merge "${PR_BRANCH}"
            fi
            echo "git merge of $GIT_REPOSITORY (pr_branch ${PR_BRANCH} - pr_commit ${PR_REVISION}) in (branch $BRANCH - commit $REVISION) done to directory $DIRECTORY_NAME"
          else
            echo "git clone of $GIT_REPOSITORY (branch $BRANCH - commit $GIT_COMMIT) done to directory $DIRECTORY_NAME"
          fi

          git show-branch --all

          apk update && apk add tree

          tree

          cd $current_dir
          if [ "$PROPERTIES_FILE" ]; then
            echo "GIT_URL=$REPOSITORY" > $PROPERTIES_FILE
            echo "GIT_BRANCH=$BRANCH" >> $PROPERTIES_FILE
            echo "GIT_COMMIT=$GIT_COMMIT" >> $PROPERTIES_FILE
            echo "$PROPERTIES_FILE content:"
            cat $PROPERTIES_FILE
          fi
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /steps
          name: steps-volume
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
        - key: toolchain.json
          path: toolchain.json