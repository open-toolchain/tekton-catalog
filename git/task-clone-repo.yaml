apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: clone-repo-task
spec:
  inputs:
    params:
      - name: task-pvc
        description: the output pvc - this is where the cloned repository will be stored
      - name: repository
        description: the git repo url
      - name: branch
        description: the git branch
        default: master
      - name: revision
        description: |
          the git revision/commit to update the git HEAD to.
          Default is to mean only use the branch
        default: ""
      - name: directoryName
        description: |
          name of the new directory to clone into.
          Default to . in order to clone at the root of the volume mounted for the pipeline run
          It will be to the "humanish" part of the repository if this param is set to blank
        default: "."
      - name: propertiesFile
        description: file containing properties out of clone task
        default: build.properties
  stepTemplate:
    env:
      - name: API
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: API
      - name: REGION
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: REGION
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY
      - name: TOOLCHAIN_ID
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: TOOLCHAIN_ID
  steps:
    - name: fetch-git-token
      image: ibmcom/pipeline-base-image
      env:
        - name: HOME
          value: "/root"
        - name: REPOSITORY
          value: $(inputs.params.repository)
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          echo "Fetching token for $REPOSITORY"
          ibmcloud config --check-version false
          ibmcloud login -a $API -r $REGION --apikey $API_KEY
          TOKEN=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token')
          echo "Doing curl ${API}/devops/toolchains/${TOOLCHAIN_ID}?env_id=ibm:yp:${REGION}"
          curl -s -X GET -o _toolchain.json -H "Accept: application/json" -H "Authorization: $TOKEN" "${API}/devops/toolchains/${TOOLCHAIN_ID}?env_id=ibm:yp:${REGION}"
          if jq '.services' _toolchain.json > /dev/null 2>&1; then
            echo "Found toolchain with id $TOOLCHAIN_ID in region $REGION"
          else
            echo "Toolchain with id $TOOLCHAIN_ID in region $REGION not found"
            exit 1
          fi
          if [[ "$REPOSITORY" != *.git ]]; then
            echo "Adding .git suffix to Repository URL"
            REPOSITORY="${REPOSITORY}.git"
          fi
          GIT_TOKEN_URL=$(cat _toolchain.json | jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .parameters.token_url')
          GIT_SERVICE_INSTANCE_ID=$(cat _toolchain.json | jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .instance_id')
          GIT_SERVICE_TYPE=$(cat _toolchain.json | jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .service_id')
          GIT_TOKEN=$(curl -s -X GET -H "Accept: application/json" -H "Authorization: $TOKEN" "${GIT_TOKEN_URL}?toolchain_id=${TOOLCHAIN_ID}&service_instance_id=${GIT_SERVICE_INSTANCE_ID}&repo_url=${REPOSITORY}" | jq -r '.access_token')
          if [ "$GIT_SERVICE_TYPE" == "github" ]; then
            GIT_AUTH_USER="x-oauth-basic"
          elif [ "$GIT_SERVICE_TYPE" == "githubpublic" ]; then
            GIT_AUTH_USER="x-oauth-basic"
          elif [ "$GIT_SERVICE_TYPE" == "hostedgit" ]; then
            GIT_AUTH_USER="oauth2"
          elif [ "$GIT_SERVICE_TYPE" == "gitlab" ]; then
            GIT_AUTH_USER="oauth2"
          elif [ "$GIT_SERVICE_TYPE" == "bitbucketgit" ]; then
            GIT_AUTH_USER="x-token-auth"
          else
            GIT_AUTH_USER="x-token-auth"
          fi;
          echo "GIT_REPOSITORY=$REPOSITORY" > /steps/next-step-env.properties
          echo "GIT_AUTH_USER=$GIT_AUTH_USER" >> /steps/next-step-env.properties
          echo "GIT_TOKEN=$GIT_TOKEN" >> /steps/next-step-env.properties
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /steps
          name: steps-volume
    - name: clone-repo
      image: alpine/git
      env:
        - name: REPOSITORY
          value: $(inputs.params.repository)
        - name: BRANCH
          value: $(inputs.params.branch)
        - name: REVISION
          value: $(inputs.params.revision)
        - name: DIRECTORY_NAME
          value: $(inputs.params.directoryName)
        - name: PROPERTIES_FILE
          value: $(inputs.params.propertiesFile)
      command: ["/bin/sh", "-c"]
      args:
        - |
          ############################
          # Workaround until a null/empty param can be flowing to Task
          # REVISION if not set is define with a single blank value 
          REVISION=$(echo $REVISION)
          ############################
          source /steps/next-step-env.properties
          echo "Cloning $REPOSITORY"
          # Add the proper creds to the git repository
          GIT_URL=$(echo "$REPOSITORY" | sed -e "s/:\/\//:\/\/$GIT_AUTH_USER:$GIT_TOKEN@/g")
          cd /artifacts
          if [ "$REVISION" ]; then
            # check if the branch exists (that may not be the case in case of a pipeline-run re-run)
            echo "Fetching specific -${REVISION}- commit"
            if [ -z "$BRANCH" ]; then
              # No branch provided
              git clone -q -n $GIT_URL $DIRECTORY_NAME
            elif git ls-remote --heads --exit-code $GIT_URL $BRANCH > /dev/null 2>&1; then
              git clone -q -b $BRANCH $GIT_URL $DIRECTORY_NAME
            else
              echo "branch $BRANCH does not exists in $REPOSITORY"
              git clone -q -n $GIT_URL $DIRECTORY_NAME
            fi
          else
            git clone -q -b $BRANCH $GIT_URL $DIRECTORY_NAME
          fi
          current_dir=$(pwd)
          if [ -z "$DIRECTORY_NAME" ]; then
            # Find the "humanish" part of the git source repository that corresponds to the clone directory
            # GIT_REPOSITORY contains the repository url with .git suffix
            DIRECTORY_NAME=$(basename "${GIT_REPOSITORY##*/}" .git)
          fi
          cd $DIRECTORY_NAME
          if [ "$REVISION" ]; then
            # Point the HEAD to the specific revision
            git checkout -q $REVISION
          fi
          GIT_COMMIT=$(git show-ref --head | head -n1 | awk '{print $1}')
          cd $current_dir
          echo "git clone of $GIT_REPOSITORY (branch $BRANCH - commit $GIT_COMMIT) done to directory $DIRECTORY_NAME"
          if [ "$PROPERTIES_FILE" ]; then
            echo "GIT_URL=$REPOSITORY" > $PROPERTIES_FILE
            echo "GIT_BRANCH=$BRANCH" >> $PROPERTIES_FILE
            echo "GIT_COMMIT=$GIT_COMMIT" >> $PROPERTIES_FILE
            echo "$PROPERTIES_FILE content:"
            cat $PROPERTIES_FILE
          fi
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /steps
          name: steps-volume
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
